/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Rakam.Client.Client;
using Rakam.Client.Api;
using Rakam.Client.Model;

namespace Rakam.Client.Test
{
    /// <summary>
    ///  Class for testing AdminApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AdminApiTests
    {
        private AdminApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AdminApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AdminApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // test 'IsInstanceOfType' AdminApi
            Assert.IsInstanceOfType(typeof(AdminApi), instance, "instance is a AdminApi");
        }

        
        /// <summary>
        /// Test AddCustomFieldsToSchema
        /// </summary>
        [Test]
        public void AddCustomFieldsToSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema = null;
            //var response = instance.AddCustomFieldsToSchema(projectAddCustomFieldsToSchema);
            //Assert.IsInstanceOf<List<SchemaField>> (response, "response is List<SchemaField>");
        }
        
        /// <summary>
        /// Test AddFieldsToSchema
        /// </summary>
        [Test]
        public void AddFieldsToSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectAddFieldsToSchema projectAddFieldsToSchema = null;
            //var response = instance.AddFieldsToSchema(projectAddFieldsToSchema);
            //Assert.IsInstanceOf<List<SchemaField>> (response, "response is List<SchemaField>");
        }
        
        /// <summary>
        /// Test CheckApiKeys
        /// </summary>
        [Test]
        public void CheckApiKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectCheckApiKeys projectCheckApiKeys = null;
            //var response = instance.CheckApiKeys(projectCheckApiKeys);
            //Assert.IsInstanceOf<List<bool?>> (response, "response is List<bool?>");
        }
        
        /// <summary>
        /// Test CheckLockKey
        /// </summary>
        [Test]
        public void CheckLockKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CheckLockKey checkLockKey = null;
            //var response = instance.CheckLockKey(checkLockKey);
            //Assert.IsInstanceOf<bool?> (response, "response is bool?");
        }
        
        /// <summary>
        /// Test Collections
        /// </summary>
        [Test]
        public void CollectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Collections();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test CreateApiKeys
        /// </summary>
        [Test]
        public void CreateApiKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CreateApiKeys();
            //Assert.IsInstanceOf<ProjectApiKeys> (response, "response is ProjectApiKeys");
        }
        
        /// <summary>
        /// Test CreateProject
        /// </summary>
        [Test]
        public void CreateProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateProject createProject = null;
            //var response = instance.CreateProject(createProject);
            //Assert.IsInstanceOf<ProjectApiKeys> (response, "response is ProjectApiKeys");
        }
        
        /// <summary>
        /// Test DeleteProject
        /// </summary>
        [Test]
        public void DeleteProjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DeleteProject();
            //Assert.IsInstanceOf<SuccessMessage> (response, "response is SuccessMessage");
        }
        
        /// <summary>
        /// Test GetConfigurations
        /// </summary>
        [Test]
        public void GetConfigurationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetConfigurations();
            //Assert.IsInstanceOf<List<ModuleDescriptor>> (response, "response is List<ModuleDescriptor>");
        }
        
        /// <summary>
        /// Test GetProjects
        /// </summary>
        [Test]
        public void GetProjectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetProjects();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetStats
        /// </summary>
        [Test]
        public void GetStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectGetStats projectGetStats = null;
            //var response = instance.GetStats(projectGetStats);
            //Assert.IsInstanceOf<Dictionary<string, Stats>> (response, "response is Dictionary<string, Stats>");
        }
        
        /// <summary>
        /// Test GetTypes
        /// </summary>
        [Test]
        public void GetTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetTypes();
            //Assert.IsInstanceOf<Dictionary<string, string>> (response, "response is Dictionary<string, string>");
        }
        
        /// <summary>
        /// Test RevokeApiKeys
        /// </summary>
        [Test]
        public void RevokeApiKeysTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string masterKey = null;
            //var response = instance.RevokeApiKeys(masterKey);
            //Assert.IsInstanceOf<SuccessMessage> (response, "response is SuccessMessage");
        }
        
        /// <summary>
        /// Test Schema
        /// </summary>
        [Test]
        public void SchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ProjectSchema projectSchema = null;
            //var response = instance.Schema(projectSchema);
            //Assert.IsInstanceOf<List<Collection>> (response, "response is List<Collection>");
        }
        
    }

}
