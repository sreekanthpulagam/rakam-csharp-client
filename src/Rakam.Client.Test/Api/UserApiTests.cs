/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Rakam.Client.Client;
using Rakam.Client.Api;
using Rakam.Client.Model;

namespace Rakam.Client.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // test 'IsInstanceOfType' UserApi
            Assert.IsInstanceOfType(typeof(UserApi), instance, "instance is a UserApi");
        }

        
        /// <summary>
        /// Test CreateSegment
        /// </summary>
        [Test]
        public void CreateSegmentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserCreateSegment userCreateSegment = null;
            //var response = instance.CreateSegment(userCreateSegment);
            //Assert.IsInstanceOf<SuccessMessage> (response, "response is SuccessMessage");
        }
        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //var response = instance.CreateUser(user);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test CreateUsers
        /// </summary>
        [Test]
        public void CreateUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserCreateUsers userCreateUsers = null;
            //var response = instance.CreateUsers(userCreateUsers);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        /// <summary>
        /// Test GetEvents
        /// </summary>
        [Test]
        public void GetEventsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserGetEvents userGetEvents = null;
            //var response = instance.GetEvents(userGetEvents);
            //Assert.IsInstanceOf<List<CollectionEvent>> (response, "response is List<CollectionEvent>");
        }
        
        /// <summary>
        /// Test GetMetadata
        /// </summary>
        [Test]
        public void GetMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMetadata();
            //Assert.IsInstanceOf<MetadataResponse> (response, "response is MetadataResponse");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserGetUser userGetUser = null;
            //var response = instance.GetUser(userGetUser);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test IncrementProperty
        /// </summary>
        [Test]
        public void IncrementPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserIncrementProperty userIncrementProperty = null;
            //var response = instance.IncrementProperty(userIncrementProperty);
            //Assert.IsInstanceOf<SuccessMessage> (response, "response is SuccessMessage");
        }
        
        /// <summary>
        /// Test SearchUsers
        /// </summary>
        [Test]
        public void SearchUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserSearchUsers userSearchUsers = null;
            //var response = instance.SearchUsers(userSearchUsers);
            //Assert.IsInstanceOf<QueryResult> (response, "response is QueryResult");
        }
        
        /// <summary>
        /// Test SetProperties
        /// </summary>
        [Test]
        public void SetPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //var response = instance.SetProperties(user);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test SetPropertiesOnce
        /// </summary>
        [Test]
        public void SetPropertiesOnceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //User user = null;
            //var response = instance.SetPropertiesOnce(user);
            //Assert.IsInstanceOf<int?> (response, "response is int?");
        }
        
        /// <summary>
        /// Test UnsetProperty
        /// </summary>
        [Test]
        public void UnsetPropertyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserUnsetProperty userUnsetProperty = null;
            //var response = instance.UnsetProperty(userUnsetProperty);
            //Assert.IsInstanceOf<SuccessMessage> (response, "response is SuccessMessage");
        }
        
    }

}
