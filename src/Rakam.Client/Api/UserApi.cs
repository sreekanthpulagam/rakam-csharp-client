/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Rakam.Client.Client;
using Rakam.Client.Model;

namespace Rakam.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage CreateSegment (UserCreateSegment userCreateSegment);

        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> CreateSegmentWithHttpInfo (UserCreateSegment userCreateSegment);
        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>int?</returns>
        int? CreateUser (User user);

        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> CreateUserWithHttpInfo (User user);
        /// <summary>
        /// Create multiple new users
        /// </summary>
        /// <remarks>
        /// Returns user ids. User id may be string or numeric.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> CreateUsers (UserCreateUsers userCreateUsers);

        /// <summary>
        /// Create multiple new users
        /// </summary>
        /// <remarks>
        /// Returns user ids. User id may be string or numeric.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> CreateUsersWithHttpInfo (UserCreateUsers userCreateUsers);
        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>List&lt;CollectionEvent&gt;</returns>
        List<CollectionEvent> GetEvents (UserGetEvents userGetEvents);

        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>ApiResponse of List&lt;CollectionEvent&gt;</returns>
        ApiResponse<List<CollectionEvent>> GetEventsWithHttpInfo (UserGetEvents userGetEvents);
        /// <summary>
        /// Get user storage metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MetadataResponse</returns>
        MetadataResponse GetMetadata ();

        /// <summary>
        /// Get user storage metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MetadataResponse</returns>
        ApiResponse<MetadataResponse> GetMetadataWithHttpInfo ();
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>User</returns>
        User GetUser (UserGetUser userGetUser);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo (UserGetUser userGetUser);
        /// <summary>
        /// Set user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage IncrementProperty (UserIncrementProperty userIncrementProperty);

        /// <summary>
        /// Set user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> IncrementPropertyWithHttpInfo (UserIncrementProperty userIncrementProperty);
        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>QueryResult</returns>
        QueryResult SearchUsers (UserSearchUsers userSearchUsers);

        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>ApiResponse of QueryResult</returns>
        ApiResponse<QueryResult> SearchUsersWithHttpInfo (UserSearchUsers userSearchUsers);
        /// <summary>
        /// Set user properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>int?</returns>
        int? SetProperties (User user);

        /// <summary>
        /// Set user properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> SetPropertiesWithHttpInfo (User user);
        /// <summary>
        /// Set user properties once
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>int?</returns>
        int? SetPropertiesOnce (User user);

        /// <summary>
        /// Set user properties once
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> SetPropertiesOnceWithHttpInfo (User user);
        /// <summary>
        /// Unset user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage UnsetProperty (UserUnsetProperty userUnsetProperty);

        /// <summary>
        /// Unset user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> UnsetPropertyWithHttpInfo (UserUnsetProperty userUnsetProperty);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> CreateSegmentAsync (UserCreateSegment userCreateSegment);

        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CreateSegmentAsyncWithHttpInfo (UserCreateSegment userCreateSegment);
        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> CreateUserAsync (User user);

        /// <summary>
        /// Create new user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> CreateUserAsyncWithHttpInfo (User user);
        /// <summary>
        /// Create multiple new users
        /// </summary>
        /// <remarks>
        /// Returns user ids. User id may be string or numeric.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> CreateUsersAsync (UserCreateUsers userCreateUsers);

        /// <summary>
        /// Create multiple new users
        /// </summary>
        /// <remarks>
        /// Returns user ids. User id may be string or numeric.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> CreateUsersAsyncWithHttpInfo (UserCreateUsers userCreateUsers);
        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>Task of List&lt;CollectionEvent&gt;</returns>
        System.Threading.Tasks.Task<List<CollectionEvent>> GetEventsAsync (UserGetEvents userGetEvents);

        /// <summary>
        /// Get events of the user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>Task of ApiResponse (List&lt;CollectionEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CollectionEvent>>> GetEventsAsyncWithHttpInfo (UserGetEvents userGetEvents);
        /// <summary>
        /// Get user storage metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MetadataResponse</returns>
        System.Threading.Tasks.Task<MetadataResponse> GetMetadataAsync ();

        /// <summary>
        /// Get user storage metadata
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataResponse>> GetMetadataAsyncWithHttpInfo ();
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync (UserGetUser userGetUser);

        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (UserGetUser userGetUser);
        /// <summary>
        /// Set user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> IncrementPropertyAsync (UserIncrementProperty userIncrementProperty);

        /// <summary>
        /// Set user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> IncrementPropertyAsyncWithHttpInfo (UserIncrementProperty userIncrementProperty);
        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>Task of QueryResult</returns>
        System.Threading.Tasks.Task<QueryResult> SearchUsersAsync (UserSearchUsers userSearchUsers);

        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<QueryResult>> SearchUsersAsyncWithHttpInfo (UserSearchUsers userSearchUsers);
        /// <summary>
        /// Set user properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> SetPropertiesAsync (User user);

        /// <summary>
        /// Set user properties
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> SetPropertiesAsyncWithHttpInfo (User user);
        /// <summary>
        /// Set user properties once
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> SetPropertiesOnceAsync (User user);

        /// <summary>
        /// Set user properties once
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> SetPropertiesOnceAsyncWithHttpInfo (User user);
        /// <summary>
        /// Unset user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> UnsetPropertyAsync (UserUnsetProperty userUnsetProperty);

        /// <summary>
        /// Unset user property
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> UnsetPropertyAsyncWithHttpInfo (UserUnsetProperty userUnsetProperty);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IUserApi
    {
        private Rakam.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Rakam.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage CreateSegment (UserCreateSegment userCreateSegment)
        {
             ApiResponse<SuccessMessage> localVarResponse = CreateSegmentWithHttpInfo(userCreateSegment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > CreateSegmentWithHttpInfo (UserCreateSegment userCreateSegment)
        {
            // verify the required parameter 'userCreateSegment' is set
            if (userCreateSegment == null)
                throw new ApiException(400, "Missing required parameter 'userCreateSegment' when calling UserApi->CreateSegment");

            var localVarPath = "/user/create_segment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userCreateSegment != null && userCreateSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userCreateSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateSegment; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> CreateSegmentAsync (UserCreateSegment userCreateSegment)
        {
             ApiResponse<SuccessMessage> localVarResponse = await CreateSegmentAsyncWithHttpInfo(userCreateSegment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateSegment"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CreateSegmentAsyncWithHttpInfo (UserCreateSegment userCreateSegment)
        {
            // verify the required parameter 'userCreateSegment' is set
            if (userCreateSegment == null)
                throw new ApiException(400, "Missing required parameter 'userCreateSegment' when calling UserApi->CreateSegment");

            var localVarPath = "/user/create_segment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userCreateSegment != null && userCreateSegment.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userCreateSegment); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateSegment; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Create new user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>int?</returns>
        public int? CreateUser (User user)
        {
             ApiResponse<int?> localVarResponse = CreateUserWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create new user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > CreateUserWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->CreateUser");

            var localVarPath = "/user/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Create new user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> CreateUserAsync (User user)
        {
             ApiResponse<int?> localVarResponse = await CreateUserAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create new user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> CreateUserAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->CreateUser");

            var localVarPath = "/user/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Create multiple new users Returns user ids. User id may be string or numeric.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> CreateUsers (UserCreateUsers userCreateUsers)
        {
             ApiResponse<List<Object>> localVarResponse = CreateUsersWithHttpInfo(userCreateUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create multiple new users Returns user ids. User id may be string or numeric.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse< List<Object> > CreateUsersWithHttpInfo (UserCreateUsers userCreateUsers)
        {
            // verify the required parameter 'userCreateUsers' is set
            if (userCreateUsers == null)
                throw new ApiException(400, "Missing required parameter 'userCreateUsers' when calling UserApi->CreateUsers");

            var localVarPath = "/user/batch/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userCreateUsers != null && userCreateUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userCreateUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateUsers; // byte array
            }

            // authentication (write_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("write_key")))
            {
                localVarHeaderParams["write_key"] = Configuration.GetApiKeyWithPrefix("write_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
            
        }

        /// <summary>
        /// Create multiple new users Returns user ids. User id may be string or numeric.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> CreateUsersAsync (UserCreateUsers userCreateUsers)
        {
             ApiResponse<List<Object>> localVarResponse = await CreateUsersAsyncWithHttpInfo(userCreateUsers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create multiple new users Returns user ids. User id may be string or numeric.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userCreateUsers"></param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> CreateUsersAsyncWithHttpInfo (UserCreateUsers userCreateUsers)
        {
            // verify the required parameter 'userCreateUsers' is set
            if (userCreateUsers == null)
                throw new ApiException(400, "Missing required parameter 'userCreateUsers' when calling UserApi->CreateUsers");

            var localVarPath = "/user/batch/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userCreateUsers != null && userCreateUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userCreateUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userCreateUsers; // byte array
            }

            // authentication (write_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("write_key")))
            {
                localVarHeaderParams["write_key"] = Configuration.GetApiKeyWithPrefix("write_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
            
        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>List&lt;CollectionEvent&gt;</returns>
        public List<CollectionEvent> GetEvents (UserGetEvents userGetEvents)
        {
             ApiResponse<List<CollectionEvent>> localVarResponse = GetEventsWithHttpInfo(userGetEvents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>ApiResponse of List&lt;CollectionEvent&gt;</returns>
        public ApiResponse< List<CollectionEvent> > GetEventsWithHttpInfo (UserGetEvents userGetEvents)
        {
            // verify the required parameter 'userGetEvents' is set
            if (userGetEvents == null)
                throw new ApiException(400, "Missing required parameter 'userGetEvents' when calling UserApi->GetEvents");

            var localVarPath = "/user/get_events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userGetEvents != null && userGetEvents.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userGetEvents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userGetEvents; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CollectionEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CollectionEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CollectionEvent>)));
            
        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>Task of List&lt;CollectionEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<CollectionEvent>> GetEventsAsync (UserGetEvents userGetEvents)
        {
             ApiResponse<List<CollectionEvent>> localVarResponse = await GetEventsAsyncWithHttpInfo(userGetEvents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get events of the user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetEvents"></param>
        /// <returns>Task of ApiResponse (List&lt;CollectionEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CollectionEvent>>> GetEventsAsyncWithHttpInfo (UserGetEvents userGetEvents)
        {
            // verify the required parameter 'userGetEvents' is set
            if (userGetEvents == null)
                throw new ApiException(400, "Missing required parameter 'userGetEvents' when calling UserApi->GetEvents");

            var localVarPath = "/user/get_events";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userGetEvents != null && userGetEvents.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userGetEvents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userGetEvents; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CollectionEvent>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CollectionEvent>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CollectionEvent>)));
            
        }

        /// <summary>
        /// Get user storage metadata 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MetadataResponse</returns>
        public MetadataResponse GetMetadata ()
        {
             ApiResponse<MetadataResponse> localVarResponse = GetMetadataWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user storage metadata 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MetadataResponse</returns>
        public ApiResponse< MetadataResponse > GetMetadataWithHttpInfo ()
        {

            var localVarPath = "/user/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataResponse)));
            
        }

        /// <summary>
        /// Get user storage metadata 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MetadataResponse</returns>
        public async System.Threading.Tasks.Task<MetadataResponse> GetMetadataAsync ()
        {
             ApiResponse<MetadataResponse> localVarResponse = await GetMetadataAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user storage metadata 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MetadataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataResponse>> GetMetadataAsyncWithHttpInfo ()
        {

            var localVarPath = "/user/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataResponse)));
            
        }

        /// <summary>
        /// Get user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>User</returns>
        public User GetUser (UserGetUser userGetUser)
        {
             ApiResponse<User> localVarResponse = GetUserWithHttpInfo(userGetUser);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse< User > GetUserWithHttpInfo (UserGetUser userGetUser)
        {
            // verify the required parameter 'userGetUser' is set
            if (userGetUser == null)
                throw new ApiException(400, "Missing required parameter 'userGetUser' when calling UserApi->GetUser");

            var localVarPath = "/user/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userGetUser != null && userGetUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userGetUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userGetUser; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
            
        }

        /// <summary>
        /// Get user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync (UserGetUser userGetUser)
        {
             ApiResponse<User> localVarResponse = await GetUserAsyncWithHttpInfo(userGetUser);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGetUser"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> GetUserAsyncWithHttpInfo (UserGetUser userGetUser)
        {
            // verify the required parameter 'userGetUser' is set
            if (userGetUser == null)
                throw new ApiException(400, "Missing required parameter 'userGetUser' when calling UserApi->GetUser");

            var localVarPath = "/user/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userGetUser != null && userGetUser.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userGetUser); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userGetUser; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<User>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (User) Configuration.ApiClient.Deserialize(localVarResponse, typeof(User)));
            
        }

        /// <summary>
        /// Set user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage IncrementProperty (UserIncrementProperty userIncrementProperty)
        {
             ApiResponse<SuccessMessage> localVarResponse = IncrementPropertyWithHttpInfo(userIncrementProperty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > IncrementPropertyWithHttpInfo (UserIncrementProperty userIncrementProperty)
        {
            // verify the required parameter 'userIncrementProperty' is set
            if (userIncrementProperty == null)
                throw new ApiException(400, "Missing required parameter 'userIncrementProperty' when calling UserApi->IncrementProperty");

            var localVarPath = "/user/increment_property";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userIncrementProperty != null && userIncrementProperty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userIncrementProperty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userIncrementProperty; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncrementProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Set user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> IncrementPropertyAsync (UserIncrementProperty userIncrementProperty)
        {
             ApiResponse<SuccessMessage> localVarResponse = await IncrementPropertyAsyncWithHttpInfo(userIncrementProperty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userIncrementProperty"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> IncrementPropertyAsyncWithHttpInfo (UserIncrementProperty userIncrementProperty)
        {
            // verify the required parameter 'userIncrementProperty' is set
            if (userIncrementProperty == null)
                throw new ApiException(400, "Missing required parameter 'userIncrementProperty' when calling UserApi->IncrementProperty");

            var localVarPath = "/user/increment_property";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userIncrementProperty != null && userIncrementProperty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userIncrementProperty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userIncrementProperty; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncrementProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Search users 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>QueryResult</returns>
        public QueryResult SearchUsers (UserSearchUsers userSearchUsers)
        {
             ApiResponse<QueryResult> localVarResponse = SearchUsersWithHttpInfo(userSearchUsers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search users 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>ApiResponse of QueryResult</returns>
        public ApiResponse< QueryResult > SearchUsersWithHttpInfo (UserSearchUsers userSearchUsers)
        {
            // verify the required parameter 'userSearchUsers' is set
            if (userSearchUsers == null)
                throw new ApiException(400, "Missing required parameter 'userSearchUsers' when calling UserApi->SearchUsers");

            var localVarPath = "/user/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userSearchUsers != null && userSearchUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSearchUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSearchUsers; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
            
        }

        /// <summary>
        /// Search users 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>Task of QueryResult</returns>
        public async System.Threading.Tasks.Task<QueryResult> SearchUsersAsync (UserSearchUsers userSearchUsers)
        {
             ApiResponse<QueryResult> localVarResponse = await SearchUsersAsyncWithHttpInfo(userSearchUsers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search users 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userSearchUsers"></param>
        /// <returns>Task of ApiResponse (QueryResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QueryResult>> SearchUsersAsyncWithHttpInfo (UserSearchUsers userSearchUsers)
        {
            // verify the required parameter 'userSearchUsers' is set
            if (userSearchUsers == null)
                throw new ApiException(400, "Missing required parameter 'userSearchUsers' when calling UserApi->SearchUsers");

            var localVarPath = "/user/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userSearchUsers != null && userSearchUsers.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userSearchUsers); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userSearchUsers; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QueryResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (QueryResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(QueryResult)));
            
        }

        /// <summary>
        /// Set user properties 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>int?</returns>
        public int? SetProperties (User user)
        {
             ApiResponse<int?> localVarResponse = SetPropertiesWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set user properties 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > SetPropertiesWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->SetProperties");

            var localVarPath = "/user/set_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Set user properties 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> SetPropertiesAsync (User user)
        {
             ApiResponse<int?> localVarResponse = await SetPropertiesAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set user properties 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> SetPropertiesAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->SetProperties");

            var localVarPath = "/user/set_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Set user properties once 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>int?</returns>
        public int? SetPropertiesOnce (User user)
        {
             ApiResponse<int?> localVarResponse = SetPropertiesOnceWithHttpInfo(user);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set user properties once 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > SetPropertiesOnceWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->SetPropertiesOnce");

            var localVarPath = "/user/set_properties_once";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPropertiesOnce", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Set user properties once 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> SetPropertiesOnceAsync (User user)
        {
             ApiResponse<int?> localVarResponse = await SetPropertiesOnceAsyncWithHttpInfo(user);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set user properties once 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="user"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> SetPropertiesOnceAsyncWithHttpInfo (User user)
        {
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling UserApi->SetPropertiesOnce");

            var localVarPath = "/user/set_properties_once";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (user != null && user.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(user); // http body (model) parameter
            }
            else
            {
                localVarPostBody = user; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetPropertiesOnce", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Unset user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage UnsetProperty (UserUnsetProperty userUnsetProperty)
        {
             ApiResponse<SuccessMessage> localVarResponse = UnsetPropertyWithHttpInfo(userUnsetProperty);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unset user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > UnsetPropertyWithHttpInfo (UserUnsetProperty userUnsetProperty)
        {
            // verify the required parameter 'userUnsetProperty' is set
            if (userUnsetProperty == null)
                throw new ApiException(400, "Missing required parameter 'userUnsetProperty' when calling UserApi->UnsetProperty");

            var localVarPath = "/user/unset_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userUnsetProperty != null && userUnsetProperty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userUnsetProperty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUnsetProperty; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Unset user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> UnsetPropertyAsync (UserUnsetProperty userUnsetProperty)
        {
             ApiResponse<SuccessMessage> localVarResponse = await UnsetPropertyAsyncWithHttpInfo(userUnsetProperty);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unset user property 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userUnsetProperty"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> UnsetPropertyAsyncWithHttpInfo (UserUnsetProperty userUnsetProperty)
        {
            // verify the required parameter 'userUnsetProperty' is set
            if (userUnsetProperty == null)
                throw new ApiException(400, "Missing required parameter 'userUnsetProperty' when calling UserApi->UnsetProperty");

            var localVarPath = "/user/unset_properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (userUnsetProperty != null && userUnsetProperty.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userUnsetProperty); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userUnsetProperty; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsetProperty", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

    }
}
