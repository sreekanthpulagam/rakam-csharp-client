/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Rakam.Client.Client;
using Rakam.Client.Model;

namespace Rakam.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICollectApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Collect multiple events
        /// </summary>
        /// <remarks>
        /// Returns 1 if the events are collected.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>int?</returns>
        int? BatchEvents (EventList eventList);

        /// <summary>
        /// Collect multiple events
        /// </summary>
        /// <remarks>
        /// Returns 1 if the events are collected.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> BatchEventsWithHttpInfo (EventList eventList);
        /// <summary>
        /// Collect Bulk events
        /// </summary>
        /// <remarks>
        /// Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage BulkEvents (EventList eventList);

        /// <summary>
        /// Collect Bulk events
        /// </summary>
        /// <remarks>
        /// Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> BulkEventsWithHttpInfo (EventList eventList);
        /// <summary>
        /// Collect bulk events from remote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>int?</returns>
        int? BulkEventsRemote (BulkEventRemote bulkEventRemote);

        /// <summary>
        /// Collect bulk events from remote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> BulkEventsRemoteWithHttpInfo (BulkEventRemote bulkEventRemote);
        /// <summary>
        /// Collect event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>int?</returns>
        int? CollectEvent (ModelEvent _event);

        /// <summary>
        /// Collect event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> CollectEventWithHttpInfo (ModelEvent _event);
        /// <summary>
        /// Commit Bulk events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage CommitBulkEvents (CommitBulkEvents commitBulkEvents);

        /// <summary>
        /// Commit Bulk events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> CommitBulkEventsWithHttpInfo (CommitBulkEvents commitBulkEvents);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Collect multiple events
        /// </summary>
        /// <remarks>
        /// Returns 1 if the events are collected.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> BatchEventsAsync (EventList eventList);

        /// <summary>
        /// Collect multiple events
        /// </summary>
        /// <remarks>
        /// Returns 1 if the events are collected.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> BatchEventsAsyncWithHttpInfo (EventList eventList);
        /// <summary>
        /// Collect Bulk events
        /// </summary>
        /// <remarks>
        /// Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> BulkEventsAsync (EventList eventList);

        /// <summary>
        /// Collect Bulk events
        /// </summary>
        /// <remarks>
        /// Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> BulkEventsAsyncWithHttpInfo (EventList eventList);
        /// <summary>
        /// Collect bulk events from remote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> BulkEventsRemoteAsync (BulkEventRemote bulkEventRemote);

        /// <summary>
        /// Collect bulk events from remote
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> BulkEventsRemoteAsyncWithHttpInfo (BulkEventRemote bulkEventRemote);
        /// <summary>
        /// Collect event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> CollectEventAsync (ModelEvent _event);

        /// <summary>
        /// Collect event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> CollectEventAsyncWithHttpInfo (ModelEvent _event);
        /// <summary>
        /// Commit Bulk events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> CommitBulkEventsAsync (CommitBulkEvents commitBulkEvents);

        /// <summary>
        /// Commit Bulk events
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CommitBulkEventsAsyncWithHttpInfo (CommitBulkEvents commitBulkEvents);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CollectApi : ICollectApi
    {
        private Rakam.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Rakam.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Collect multiple events Returns 1 if the events are collected.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>int?</returns>
        public int? BatchEvents (EventList eventList)
        {
             ApiResponse<int?> localVarResponse = BatchEventsWithHttpInfo(eventList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Collect multiple events Returns 1 if the events are collected.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > BatchEventsWithHttpInfo (EventList eventList)
        {
            // verify the required parameter 'eventList' is set
            if (eventList == null)
                throw new ApiException(400, "Missing required parameter 'eventList' when calling CollectApi->BatchEvents");

            var localVarPath = "/event/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventList != null && eventList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Collect multiple events Returns 1 if the events are collected.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> BatchEventsAsync (EventList eventList)
        {
             ApiResponse<int?> localVarResponse = await BatchEventsAsyncWithHttpInfo(eventList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Collect multiple events Returns 1 if the events are collected.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> BatchEventsAsyncWithHttpInfo (EventList eventList)
        {
            // verify the required parameter 'eventList' is set
            if (eventList == null)
                throw new ApiException(400, "Missing required parameter 'eventList' when calling CollectApi->BatchEvents");

            var localVarPath = "/event/batch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventList != null && eventList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BatchEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Collect Bulk events Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage BulkEvents (EventList eventList)
        {
             ApiResponse<SuccessMessage> localVarResponse = BulkEventsWithHttpInfo(eventList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Collect Bulk events Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > BulkEventsWithHttpInfo (EventList eventList)
        {
            // verify the required parameter 'eventList' is set
            if (eventList == null)
                throw new ApiException(400, "Missing required parameter 'eventList' when calling CollectApi->BulkEvents");

            var localVarPath = "/event/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventList != null && eventList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Collect Bulk events Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> BulkEventsAsync (EventList eventList)
        {
             ApiResponse<SuccessMessage> localVarResponse = await BulkEventsAsyncWithHttpInfo(eventList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Collect Bulk events Bulk API requires master_key as api key and designed to handle large value of data. The endpoint also accepts application/avro and text/csv formats. You need need to set &#39;collection&#39; and &#39;master_key&#39; query parameters if the content-type is not application/json.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventList"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> BulkEventsAsyncWithHttpInfo (EventList eventList)
        {
            // verify the required parameter 'eventList' is set
            if (eventList == null)
                throw new ApiException(400, "Missing required parameter 'eventList' when calling CollectApi->BulkEvents");

            var localVarPath = "/event/bulk";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventList != null && eventList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Collect bulk events from remote 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>int?</returns>
        public int? BulkEventsRemote (BulkEventRemote bulkEventRemote)
        {
             ApiResponse<int?> localVarResponse = BulkEventsRemoteWithHttpInfo(bulkEventRemote);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Collect bulk events from remote 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > BulkEventsRemoteWithHttpInfo (BulkEventRemote bulkEventRemote)
        {
            // verify the required parameter 'bulkEventRemote' is set
            if (bulkEventRemote == null)
                throw new ApiException(400, "Missing required parameter 'bulkEventRemote' when calling CollectApi->BulkEventsRemote");

            var localVarPath = "/event/bulk/remote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bulkEventRemote != null && bulkEventRemote.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bulkEventRemote); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkEventRemote; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEventsRemote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Collect bulk events from remote 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> BulkEventsRemoteAsync (BulkEventRemote bulkEventRemote)
        {
             ApiResponse<int?> localVarResponse = await BulkEventsRemoteAsyncWithHttpInfo(bulkEventRemote);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Collect bulk events from remote 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bulkEventRemote"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> BulkEventsRemoteAsyncWithHttpInfo (BulkEventRemote bulkEventRemote)
        {
            // verify the required parameter 'bulkEventRemote' is set
            if (bulkEventRemote == null)
                throw new ApiException(400, "Missing required parameter 'bulkEventRemote' when calling CollectApi->BulkEventsRemote");

            var localVarPath = "/event/bulk/remote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (bulkEventRemote != null && bulkEventRemote.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(bulkEventRemote); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bulkEventRemote; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BulkEventsRemote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Collect event 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>int?</returns>
        public int? CollectEvent (ModelEvent _event)
        {
             ApiResponse<int?> localVarResponse = CollectEventWithHttpInfo(_event);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Collect event 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > CollectEventWithHttpInfo (ModelEvent _event)
        {
            // verify the required parameter '_event' is set
            if (_event == null)
                throw new ApiException(400, "Missing required parameter '_event' when calling CollectApi->CollectEvent");

            var localVarPath = "/event/collect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_event != null && _event.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(_event); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _event; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Collect event 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> CollectEventAsync (ModelEvent _event)
        {
             ApiResponse<int?> localVarResponse = await CollectEventAsyncWithHttpInfo(_event);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Collect event 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_event"></param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> CollectEventAsyncWithHttpInfo (ModelEvent _event)
        {
            // verify the required parameter '_event' is set
            if (_event == null)
                throw new ApiException(400, "Missing required parameter '_event' when calling CollectApi->CollectEvent");

            var localVarPath = "/event/collect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (_event != null && _event.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(_event); // http body (model) parameter
            }
            else
            {
                localVarPostBody = _event; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (int?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
            
        }

        /// <summary>
        /// Commit Bulk events 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage CommitBulkEvents (CommitBulkEvents commitBulkEvents)
        {
             ApiResponse<SuccessMessage> localVarResponse = CommitBulkEventsWithHttpInfo(commitBulkEvents);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit Bulk events 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > CommitBulkEventsWithHttpInfo (CommitBulkEvents commitBulkEvents)
        {
            // verify the required parameter 'commitBulkEvents' is set
            if (commitBulkEvents == null)
                throw new ApiException(400, "Missing required parameter 'commitBulkEvents' when calling CollectApi->CommitBulkEvents");

            var localVarPath = "/event/bulk/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commitBulkEvents != null && commitBulkEvents.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(commitBulkEvents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commitBulkEvents; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitBulkEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Commit Bulk events 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> CommitBulkEventsAsync (CommitBulkEvents commitBulkEvents)
        {
             ApiResponse<SuccessMessage> localVarResponse = await CommitBulkEventsAsyncWithHttpInfo(commitBulkEvents);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit Bulk events 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commitBulkEvents"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CommitBulkEventsAsyncWithHttpInfo (CommitBulkEvents commitBulkEvents)
        {
            // verify the required parameter 'commitBulkEvents' is set
            if (commitBulkEvents == null)
                throw new ApiException(400, "Missing required parameter 'commitBulkEvents' when calling CollectApi->CommitBulkEvents");

            var localVarPath = "/event/bulk/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (commitBulkEvents != null && commitBulkEvents.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(commitBulkEvents); // http body (model) parameter
            }
            else
            {
                localVarPostBody = commitBulkEvents; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CommitBulkEvents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

    }
}
