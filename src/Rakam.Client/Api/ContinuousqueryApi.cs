/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Rakam.Client.Client;
using Rakam.Client.Model;

namespace Rakam.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContinuousqueryApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create stream
        /// </summary>
        /// <remarks>
        /// Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage CreateQuery (ContinuousQuery continuousQuery);

        /// <summary>
        /// Create stream
        /// </summary>
        /// <remarks>
        /// Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> CreateQueryWithHttpInfo (ContinuousQuery continuousQuery);
        /// <summary>
        /// Delete stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage DeleteQuery (ContinuousQueryDeleteQuery continuousQueryDeleteQuery);

        /// <summary>
        /// Delete stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> DeleteQueryWithHttpInfo (ContinuousQueryDeleteQuery continuousQueryDeleteQuery);
        /// <summary>
        /// Get continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>ContinuousQuery</returns>
        ContinuousQuery GetQuery (ContinuousQueryGetQuery continuousQueryGetQuery);

        /// <summary>
        /// Get continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>ApiResponse of ContinuousQuery</returns>
        ApiResponse<ContinuousQuery> GetQueryWithHttpInfo (ContinuousQueryGetQuery continuousQueryGetQuery);
        /// <summary>
        /// Get query schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> GetSchemaOfQuery (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery);

        /// <summary>
        /// Get query schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> GetSchemaOfQueryWithHttpInfo (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery);
        /// <summary>
        /// List queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ContinuousQuery&gt;</returns>
        List<ContinuousQuery> ListQueries ();

        /// <summary>
        /// List queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContinuousQuery&gt;</returns>
        ApiResponse<List<ContinuousQuery>> ListQueriesWithHttpInfo ();
        /// <summary>
        /// Test continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>bool?</returns>
        bool? TestQuery (ContinuousQueryTestQuery continuousQueryTestQuery);

        /// <summary>
        /// Test continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> TestQueryWithHttpInfo (ContinuousQueryTestQuery continuousQueryTestQuery);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create stream
        /// </summary>
        /// <remarks>
        /// Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> CreateQueryAsync (ContinuousQuery continuousQuery);

        /// <summary>
        /// Create stream
        /// </summary>
        /// <remarks>
        /// Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CreateQueryAsyncWithHttpInfo (ContinuousQuery continuousQuery);
        /// <summary>
        /// Delete stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> DeleteQueryAsync (ContinuousQueryDeleteQuery continuousQueryDeleteQuery);

        /// <summary>
        /// Delete stream
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> DeleteQueryAsyncWithHttpInfo (ContinuousQueryDeleteQuery continuousQueryDeleteQuery);
        /// <summary>
        /// Get continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>Task of ContinuousQuery</returns>
        System.Threading.Tasks.Task<ContinuousQuery> GetQueryAsync (ContinuousQueryGetQuery continuousQueryGetQuery);

        /// <summary>
        /// Get continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>Task of ApiResponse (ContinuousQuery)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContinuousQuery>> GetQueryAsyncWithHttpInfo (ContinuousQueryGetQuery continuousQueryGetQuery);
        /// <summary>
        /// Get query schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> GetSchemaOfQueryAsync (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery);

        /// <summary>
        /// Get query schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetSchemaOfQueryAsyncWithHttpInfo (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery);
        /// <summary>
        /// List queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ContinuousQuery&gt;</returns>
        System.Threading.Tasks.Task<List<ContinuousQuery>> ListQueriesAsync ();

        /// <summary>
        /// List queries
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ContinuousQuery&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ContinuousQuery>>> ListQueriesAsyncWithHttpInfo ();
        /// <summary>
        /// Test continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> TestQueryAsync (ContinuousQueryTestQuery continuousQueryTestQuery);

        /// <summary>
        /// Test continuous query
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> TestQueryAsyncWithHttpInfo (ContinuousQueryTestQuery continuousQueryTestQuery);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContinuousqueryApi : IContinuousqueryApi
    {
        private Rakam.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContinuousqueryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContinuousqueryApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContinuousqueryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContinuousqueryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Rakam.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create stream Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage CreateQuery (ContinuousQuery continuousQuery)
        {
             ApiResponse<SuccessMessage> localVarResponse = CreateQueryWithHttpInfo(continuousQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create stream Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > CreateQueryWithHttpInfo (ContinuousQuery continuousQuery)
        {
            // verify the required parameter 'continuousQuery' is set
            if (continuousQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQuery' when calling ContinuousqueryApi->CreateQuery");

            var localVarPath = "/continuous-query/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQuery != null && continuousQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQuery; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Create stream Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> CreateQueryAsync (ContinuousQuery continuousQuery)
        {
             ApiResponse<SuccessMessage> localVarResponse = await CreateQueryAsyncWithHttpInfo(continuousQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create stream Creates a new continuous query for specified SQL query. Rakam will process data in batches keep the result of query in-memory all the time. Compared to reports, continuous queries continuously aggregate the data on the fly and the result is always available either in-memory or disk.
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQuery"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CreateQueryAsyncWithHttpInfo (ContinuousQuery continuousQuery)
        {
            // verify the required parameter 'continuousQuery' is set
            if (continuousQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQuery' when calling ContinuousqueryApi->CreateQuery");

            var localVarPath = "/continuous-query/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQuery != null && continuousQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQuery; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Delete stream 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage DeleteQuery (ContinuousQueryDeleteQuery continuousQueryDeleteQuery)
        {
             ApiResponse<SuccessMessage> localVarResponse = DeleteQueryWithHttpInfo(continuousQueryDeleteQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete stream 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > DeleteQueryWithHttpInfo (ContinuousQueryDeleteQuery continuousQueryDeleteQuery)
        {
            // verify the required parameter 'continuousQueryDeleteQuery' is set
            if (continuousQueryDeleteQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryDeleteQuery' when calling ContinuousqueryApi->DeleteQuery");

            var localVarPath = "/continuous-query/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryDeleteQuery != null && continuousQueryDeleteQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryDeleteQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryDeleteQuery; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Delete stream 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> DeleteQueryAsync (ContinuousQueryDeleteQuery continuousQueryDeleteQuery)
        {
             ApiResponse<SuccessMessage> localVarResponse = await DeleteQueryAsyncWithHttpInfo(continuousQueryDeleteQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete stream 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryDeleteQuery"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> DeleteQueryAsyncWithHttpInfo (ContinuousQueryDeleteQuery continuousQueryDeleteQuery)
        {
            // verify the required parameter 'continuousQueryDeleteQuery' is set
            if (continuousQueryDeleteQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryDeleteQuery' when calling ContinuousqueryApi->DeleteQuery");

            var localVarPath = "/continuous-query/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryDeleteQuery != null && continuousQueryDeleteQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryDeleteQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryDeleteQuery; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Get continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>ContinuousQuery</returns>
        public ContinuousQuery GetQuery (ContinuousQueryGetQuery continuousQueryGetQuery)
        {
             ApiResponse<ContinuousQuery> localVarResponse = GetQueryWithHttpInfo(continuousQueryGetQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>ApiResponse of ContinuousQuery</returns>
        public ApiResponse< ContinuousQuery > GetQueryWithHttpInfo (ContinuousQueryGetQuery continuousQueryGetQuery)
        {
            // verify the required parameter 'continuousQueryGetQuery' is set
            if (continuousQueryGetQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryGetQuery' when calling ContinuousqueryApi->GetQuery");

            var localVarPath = "/continuous-query/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryGetQuery != null && continuousQueryGetQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryGetQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryGetQuery; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContinuousQuery>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContinuousQuery) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContinuousQuery)));
            
        }

        /// <summary>
        /// Get continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>Task of ContinuousQuery</returns>
        public async System.Threading.Tasks.Task<ContinuousQuery> GetQueryAsync (ContinuousQueryGetQuery continuousQueryGetQuery)
        {
             ApiResponse<ContinuousQuery> localVarResponse = await GetQueryAsyncWithHttpInfo(continuousQueryGetQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetQuery"></param>
        /// <returns>Task of ApiResponse (ContinuousQuery)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContinuousQuery>> GetQueryAsyncWithHttpInfo (ContinuousQueryGetQuery continuousQueryGetQuery)
        {
            // verify the required parameter 'continuousQueryGetQuery' is set
            if (continuousQueryGetQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryGetQuery' when calling ContinuousqueryApi->GetQuery");

            var localVarPath = "/continuous-query/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryGetQuery != null && continuousQueryGetQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryGetQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryGetQuery; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContinuousQuery>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContinuousQuery) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContinuousQuery)));
            
        }

        /// <summary>
        /// Get query schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> GetSchemaOfQuery (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery)
        {
             ApiResponse<List<Collection>> localVarResponse = GetSchemaOfQueryWithHttpInfo(continuousQueryGetSchemaOfQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get query schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public ApiResponse< List<Collection> > GetSchemaOfQueryWithHttpInfo (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery)
        {
            // verify the required parameter 'continuousQueryGetSchemaOfQuery' is set
            if (continuousQueryGetSchemaOfQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryGetSchemaOfQuery' when calling ContinuousqueryApi->GetSchemaOfQuery");

            var localVarPath = "/continuous-query/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryGetSchemaOfQuery != null && continuousQueryGetSchemaOfQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryGetSchemaOfQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryGetSchemaOfQuery; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaOfQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Collection>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
            
        }

        /// <summary>
        /// Get query schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> GetSchemaOfQueryAsync (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery)
        {
             ApiResponse<List<Collection>> localVarResponse = await GetSchemaOfQueryAsyncWithHttpInfo(continuousQueryGetSchemaOfQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get query schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryGetSchemaOfQuery"></param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Collection>>> GetSchemaOfQueryAsyncWithHttpInfo (ContinuousQueryGetSchemaOfQuery continuousQueryGetSchemaOfQuery)
        {
            // verify the required parameter 'continuousQueryGetSchemaOfQuery' is set
            if (continuousQueryGetSchemaOfQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryGetSchemaOfQuery' when calling ContinuousqueryApi->GetSchemaOfQuery");

            var localVarPath = "/continuous-query/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryGetSchemaOfQuery != null && continuousQueryGetSchemaOfQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryGetSchemaOfQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryGetSchemaOfQuery; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaOfQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Collection>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
            
        }

        /// <summary>
        /// List queries 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ContinuousQuery&gt;</returns>
        public List<ContinuousQuery> ListQueries ()
        {
             ApiResponse<List<ContinuousQuery>> localVarResponse = ListQueriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List queries 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ContinuousQuery&gt;</returns>
        public ApiResponse< List<ContinuousQuery> > ListQueriesWithHttpInfo ()
        {

            var localVarPath = "/continuous-query/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContinuousQuery>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContinuousQuery>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContinuousQuery>)));
            
        }

        /// <summary>
        /// List queries 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ContinuousQuery&gt;</returns>
        public async System.Threading.Tasks.Task<List<ContinuousQuery>> ListQueriesAsync ()
        {
             ApiResponse<List<ContinuousQuery>> localVarResponse = await ListQueriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List queries 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ContinuousQuery&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ContinuousQuery>>> ListQueriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/continuous-query/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListQueries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ContinuousQuery>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ContinuousQuery>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ContinuousQuery>)));
            
        }

        /// <summary>
        /// Test continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>bool?</returns>
        public bool? TestQuery (ContinuousQueryTestQuery continuousQueryTestQuery)
        {
             ApiResponse<bool?> localVarResponse = TestQueryWithHttpInfo(continuousQueryTestQuery);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Test continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > TestQueryWithHttpInfo (ContinuousQueryTestQuery continuousQueryTestQuery)
        {
            // verify the required parameter 'continuousQueryTestQuery' is set
            if (continuousQueryTestQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryTestQuery' when calling ContinuousqueryApi->TestQuery");

            var localVarPath = "/continuous-query/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryTestQuery != null && continuousQueryTestQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryTestQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryTestQuery; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Test continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> TestQueryAsync (ContinuousQueryTestQuery continuousQueryTestQuery)
        {
             ApiResponse<bool?> localVarResponse = await TestQueryAsyncWithHttpInfo(continuousQueryTestQuery);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Test continuous query 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="continuousQueryTestQuery"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> TestQueryAsyncWithHttpInfo (ContinuousQueryTestQuery continuousQueryTestQuery)
        {
            // verify the required parameter 'continuousQueryTestQuery' is set
            if (continuousQueryTestQuery == null)
                throw new ApiException(400, "Missing required parameter 'continuousQueryTestQuery' when calling ContinuousqueryApi->TestQuery");

            var localVarPath = "/continuous-query/test";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (continuousQueryTestQuery != null && continuousQueryTestQuery.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(continuousQueryTestQuery); // http body (model) parameter
            }
            else
            {
                localVarPostBody = continuousQueryTestQuery; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestQuery", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

    }
}
