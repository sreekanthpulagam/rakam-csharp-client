/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Rakam.Client.Client;
using Rakam.Client.Model;

namespace Rakam.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMaterializedviewApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage CreateView (MaterializedView materializedView);

        /// <summary>
        /// Create view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> CreateViewWithHttpInfo (MaterializedView materializedView);
        /// <summary>
        /// Delete materialized view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage DeleteView (MaterializedViewDeleteView materializedViewDeleteView);

        /// <summary>
        /// Delete materialized view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> DeleteViewWithHttpInfo (MaterializedViewDeleteView materializedViewDeleteView);
        /// <summary>
        /// Get schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>List&lt;MaterializedViewSchema&gt;</returns>
        List<MaterializedViewSchema> GetSchemaOfView (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView);

        /// <summary>
        /// Get schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>ApiResponse of List&lt;MaterializedViewSchema&gt;</returns>
        ApiResponse<List<MaterializedViewSchema>> GetSchemaOfViewWithHttpInfo (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView);
        /// <summary>
        /// Get view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>MaterializedView</returns>
        MaterializedView GetView (MaterializedViewGetView materializedViewGetView);

        /// <summary>
        /// Get view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>ApiResponse of MaterializedView</returns>
        ApiResponse<MaterializedView> GetViewWithHttpInfo (MaterializedViewGetView materializedViewGetView);
        /// <summary>
        /// List views
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MaterializedView&gt;</returns>
        List<MaterializedView> ListViews ();

        /// <summary>
        /// List views
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MaterializedView&gt;</returns>
        ApiResponse<List<MaterializedView>> ListViewsWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> CreateViewAsync (MaterializedView materializedView);

        /// <summary>
        /// Create view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CreateViewAsyncWithHttpInfo (MaterializedView materializedView);
        /// <summary>
        /// Delete materialized view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> DeleteViewAsync (MaterializedViewDeleteView materializedViewDeleteView);

        /// <summary>
        /// Delete materialized view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> DeleteViewAsyncWithHttpInfo (MaterializedViewDeleteView materializedViewDeleteView);
        /// <summary>
        /// Get schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>Task of List&lt;MaterializedViewSchema&gt;</returns>
        System.Threading.Tasks.Task<List<MaterializedViewSchema>> GetSchemaOfViewAsync (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView);

        /// <summary>
        /// Get schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>Task of ApiResponse (List&lt;MaterializedViewSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaterializedViewSchema>>> GetSchemaOfViewAsyncWithHttpInfo (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView);
        /// <summary>
        /// Get view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>Task of MaterializedView</returns>
        System.Threading.Tasks.Task<MaterializedView> GetViewAsync (MaterializedViewGetView materializedViewGetView);

        /// <summary>
        /// Get view
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>Task of ApiResponse (MaterializedView)</returns>
        System.Threading.Tasks.Task<ApiResponse<MaterializedView>> GetViewAsyncWithHttpInfo (MaterializedViewGetView materializedViewGetView);
        /// <summary>
        /// List views
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MaterializedView&gt;</returns>
        System.Threading.Tasks.Task<List<MaterializedView>> ListViewsAsync ();

        /// <summary>
        /// List views
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MaterializedView&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MaterializedView>>> ListViewsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MaterializedviewApi : IMaterializedviewApi
    {
        private Rakam.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterializedviewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MaterializedviewApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MaterializedviewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MaterializedviewApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Rakam.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage CreateView (MaterializedView materializedView)
        {
             ApiResponse<SuccessMessage> localVarResponse = CreateViewWithHttpInfo(materializedView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > CreateViewWithHttpInfo (MaterializedView materializedView)
        {
            // verify the required parameter 'materializedView' is set
            if (materializedView == null)
                throw new ApiException(400, "Missing required parameter 'materializedView' when calling MaterializedviewApi->CreateView");

            var localVarPath = "/materialized-view/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedView != null && materializedView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedView; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Create view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> CreateViewAsync (MaterializedView materializedView)
        {
             ApiResponse<SuccessMessage> localVarResponse = await CreateViewAsyncWithHttpInfo(materializedView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedView"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> CreateViewAsyncWithHttpInfo (MaterializedView materializedView)
        {
            // verify the required parameter 'materializedView' is set
            if (materializedView == null)
                throw new ApiException(400, "Missing required parameter 'materializedView' when calling MaterializedviewApi->CreateView");

            var localVarPath = "/materialized-view/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedView != null && materializedView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedView; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Delete materialized view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage DeleteView (MaterializedViewDeleteView materializedViewDeleteView)
        {
             ApiResponse<SuccessMessage> localVarResponse = DeleteViewWithHttpInfo(materializedViewDeleteView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete materialized view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > DeleteViewWithHttpInfo (MaterializedViewDeleteView materializedViewDeleteView)
        {
            // verify the required parameter 'materializedViewDeleteView' is set
            if (materializedViewDeleteView == null)
                throw new ApiException(400, "Missing required parameter 'materializedViewDeleteView' when calling MaterializedviewApi->DeleteView");

            var localVarPath = "/materialized-view/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedViewDeleteView != null && materializedViewDeleteView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedViewDeleteView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedViewDeleteView; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Delete materialized view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> DeleteViewAsync (MaterializedViewDeleteView materializedViewDeleteView)
        {
             ApiResponse<SuccessMessage> localVarResponse = await DeleteViewAsyncWithHttpInfo(materializedViewDeleteView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete materialized view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewDeleteView"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> DeleteViewAsyncWithHttpInfo (MaterializedViewDeleteView materializedViewDeleteView)
        {
            // verify the required parameter 'materializedViewDeleteView' is set
            if (materializedViewDeleteView == null)
                throw new ApiException(400, "Missing required parameter 'materializedViewDeleteView' when calling MaterializedviewApi->DeleteView");

            var localVarPath = "/materialized-view/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedViewDeleteView != null && materializedViewDeleteView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedViewDeleteView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedViewDeleteView; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Get schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>List&lt;MaterializedViewSchema&gt;</returns>
        public List<MaterializedViewSchema> GetSchemaOfView (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView)
        {
             ApiResponse<List<MaterializedViewSchema>> localVarResponse = GetSchemaOfViewWithHttpInfo(materializedViewGetSchemaOfView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>ApiResponse of List&lt;MaterializedViewSchema&gt;</returns>
        public ApiResponse< List<MaterializedViewSchema> > GetSchemaOfViewWithHttpInfo (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView)
        {
            // verify the required parameter 'materializedViewGetSchemaOfView' is set
            if (materializedViewGetSchemaOfView == null)
                throw new ApiException(400, "Missing required parameter 'materializedViewGetSchemaOfView' when calling MaterializedviewApi->GetSchemaOfView");

            var localVarPath = "/materialized-view/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedViewGetSchemaOfView != null && materializedViewGetSchemaOfView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedViewGetSchemaOfView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedViewGetSchemaOfView; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaOfView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterializedViewSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterializedViewSchema>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterializedViewSchema>)));
            
        }

        /// <summary>
        /// Get schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>Task of List&lt;MaterializedViewSchema&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaterializedViewSchema>> GetSchemaOfViewAsync (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView)
        {
             ApiResponse<List<MaterializedViewSchema>> localVarResponse = await GetSchemaOfViewAsyncWithHttpInfo(materializedViewGetSchemaOfView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetSchemaOfView"></param>
        /// <returns>Task of ApiResponse (List&lt;MaterializedViewSchema&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaterializedViewSchema>>> GetSchemaOfViewAsyncWithHttpInfo (MaterializedViewGetSchemaOfView materializedViewGetSchemaOfView)
        {
            // verify the required parameter 'materializedViewGetSchemaOfView' is set
            if (materializedViewGetSchemaOfView == null)
                throw new ApiException(400, "Missing required parameter 'materializedViewGetSchemaOfView' when calling MaterializedviewApi->GetSchemaOfView");

            var localVarPath = "/materialized-view/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedViewGetSchemaOfView != null && materializedViewGetSchemaOfView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedViewGetSchemaOfView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedViewGetSchemaOfView; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchemaOfView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterializedViewSchema>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterializedViewSchema>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterializedViewSchema>)));
            
        }

        /// <summary>
        /// Get view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>MaterializedView</returns>
        public MaterializedView GetView (MaterializedViewGetView materializedViewGetView)
        {
             ApiResponse<MaterializedView> localVarResponse = GetViewWithHttpInfo(materializedViewGetView);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>ApiResponse of MaterializedView</returns>
        public ApiResponse< MaterializedView > GetViewWithHttpInfo (MaterializedViewGetView materializedViewGetView)
        {
            // verify the required parameter 'materializedViewGetView' is set
            if (materializedViewGetView == null)
                throw new ApiException(400, "Missing required parameter 'materializedViewGetView' when calling MaterializedviewApi->GetView");

            var localVarPath = "/materialized-view/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedViewGetView != null && materializedViewGetView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedViewGetView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedViewGetView; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaterializedView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaterializedView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaterializedView)));
            
        }

        /// <summary>
        /// Get view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>Task of MaterializedView</returns>
        public async System.Threading.Tasks.Task<MaterializedView> GetViewAsync (MaterializedViewGetView materializedViewGetView)
        {
             ApiResponse<MaterializedView> localVarResponse = await GetViewAsyncWithHttpInfo(materializedViewGetView);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get view 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="materializedViewGetView"></param>
        /// <returns>Task of ApiResponse (MaterializedView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MaterializedView>> GetViewAsyncWithHttpInfo (MaterializedViewGetView materializedViewGetView)
        {
            // verify the required parameter 'materializedViewGetView' is set
            if (materializedViewGetView == null)
                throw new ApiException(400, "Missing required parameter 'materializedViewGetView' when calling MaterializedviewApi->GetView");

            var localVarPath = "/materialized-view/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (materializedViewGetView != null && materializedViewGetView.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(materializedViewGetView); // http body (model) parameter
            }
            else
            {
                localVarPostBody = materializedViewGetView; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MaterializedView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MaterializedView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MaterializedView)));
            
        }

        /// <summary>
        /// List views 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MaterializedView&gt;</returns>
        public List<MaterializedView> ListViews ()
        {
             ApiResponse<List<MaterializedView>> localVarResponse = ListViewsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List views 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MaterializedView&gt;</returns>
        public ApiResponse< List<MaterializedView> > ListViewsWithHttpInfo ()
        {

            var localVarPath = "/materialized-view/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterializedView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterializedView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterializedView>)));
            
        }

        /// <summary>
        /// List views 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MaterializedView&gt;</returns>
        public async System.Threading.Tasks.Task<List<MaterializedView>> ListViewsAsync ()
        {
             ApiResponse<List<MaterializedView>> localVarResponse = await ListViewsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List views 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MaterializedView&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MaterializedView>>> ListViewsAsyncWithHttpInfo ()
        {

            var localVarPath = "/materialized-view/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MaterializedView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<MaterializedView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MaterializedView>)));
            
        }

    }
}
