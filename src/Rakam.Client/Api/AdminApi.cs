/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Rakam.Client.Client;
using Rakam.Client.Model;

namespace Rakam.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAdminApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add fields to collections by transforming other schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>List&lt;SchemaField&gt;</returns>
        List<SchemaField> AddCustomFieldsToSchema (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema);

        /// <summary>
        /// Add fields to collections by transforming other schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>ApiResponse of List&lt;SchemaField&gt;</returns>
        ApiResponse<List<SchemaField>> AddCustomFieldsToSchemaWithHttpInfo (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema);
        /// <summary>
        /// Add fields to collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>List&lt;SchemaField&gt;</returns>
        List<SchemaField> AddFieldsToSchema (ProjectAddFieldsToSchema projectAddFieldsToSchema);

        /// <summary>
        /// Add fields to collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>ApiResponse of List&lt;SchemaField&gt;</returns>
        ApiResponse<List<SchemaField>> AddFieldsToSchemaWithHttpInfo (ProjectAddFieldsToSchema projectAddFieldsToSchema);
        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>List&lt;bool?&gt;</returns>
        List<bool?> CheckApiKeys (ProjectCheckApiKeys projectCheckApiKeys);

        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>ApiResponse of List&lt;bool?&gt;</returns>
        ApiResponse<List<bool?>> CheckApiKeysWithHttpInfo (ProjectCheckApiKeys projectCheckApiKeys);
        /// <summary>
        /// Check lock key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>bool?</returns>
        bool? CheckLockKey (CheckLockKey checkLockKey);

        /// <summary>
        /// Check lock key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>ApiResponse of bool?</returns>
        ApiResponse<bool?> CheckLockKeyWithHttpInfo (CheckLockKey checkLockKey);
        /// <summary>
        /// Get collection names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> Collections ();

        /// <summary>
        /// Get collection names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> CollectionsWithHttpInfo ();
        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProjectApiKeys</returns>
        ProjectApiKeys CreateApiKeys ();

        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProjectApiKeys</returns>
        ApiResponse<ProjectApiKeys> CreateApiKeysWithHttpInfo ();
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>ProjectApiKeys</returns>
        ProjectApiKeys CreateProject (CreateProject createProject);

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>ApiResponse of ProjectApiKeys</returns>
        ApiResponse<ProjectApiKeys> CreateProjectWithHttpInfo (CreateProject createProject);
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SuccessMessage</returns>
        SuccessMessage DeleteProject ();

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> DeleteProjectWithHttpInfo ();
        /// <summary>
        /// List installed modules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModuleDescriptor&gt;</returns>
        List<ModuleDescriptor> GetConfigurations ();

        /// <summary>
        /// List installed modules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModuleDescriptor&gt;</returns>
        ApiResponse<List<ModuleDescriptor>> GetConfigurationsWithHttpInfo ();
        /// <summary>
        /// List created projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> GetProjects ();

        /// <summary>
        /// List created projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> GetProjectsWithHttpInfo ();
        /// <summary>
        /// Get project stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>Dictionary&lt;string, Stats&gt;</returns>
        Dictionary<string, Stats> GetStats (ProjectGetStats projectGetStats);

        /// <summary>
        /// Get project stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Stats&gt;</returns>
        ApiResponse<Dictionary<string, Stats>> GetStatsWithHttpInfo (ProjectGetStats projectGetStats);
        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> GetTypes ();

        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> GetTypesWithHttpInfo ();
        /// <summary>
        /// Revoke API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>SuccessMessage</returns>
        SuccessMessage RevokeApiKeys (string masterKey);

        /// <summary>
        /// Revoke API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        ApiResponse<SuccessMessage> RevokeApiKeysWithHttpInfo (string masterKey);
        /// <summary>
        /// Get collection schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>List&lt;Collection&gt;</returns>
        List<Collection> Schema (ProjectSchema projectSchema);

        /// <summary>
        /// Get collection schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        ApiResponse<List<Collection>> SchemaWithHttpInfo (ProjectSchema projectSchema);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add fields to collections by transforming other schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>Task of List&lt;SchemaField&gt;</returns>
        System.Threading.Tasks.Task<List<SchemaField>> AddCustomFieldsToSchemaAsync (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema);

        /// <summary>
        /// Add fields to collections by transforming other schemas
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>Task of ApiResponse (List&lt;SchemaField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SchemaField>>> AddCustomFieldsToSchemaAsyncWithHttpInfo (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema);
        /// <summary>
        /// Add fields to collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>Task of List&lt;SchemaField&gt;</returns>
        System.Threading.Tasks.Task<List<SchemaField>> AddFieldsToSchemaAsync (ProjectAddFieldsToSchema projectAddFieldsToSchema);

        /// <summary>
        /// Add fields to collections
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>Task of ApiResponse (List&lt;SchemaField&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SchemaField>>> AddFieldsToSchemaAsyncWithHttpInfo (ProjectAddFieldsToSchema projectAddFieldsToSchema);
        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>Task of List&lt;bool?&gt;</returns>
        System.Threading.Tasks.Task<List<bool?>> CheckApiKeysAsync (ProjectCheckApiKeys projectCheckApiKeys);

        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>Task of ApiResponse (List&lt;bool?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<bool?>>> CheckApiKeysAsyncWithHttpInfo (ProjectCheckApiKeys projectCheckApiKeys);
        /// <summary>
        /// Check lock key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>Task of bool?</returns>
        System.Threading.Tasks.Task<bool?> CheckLockKeyAsync (CheckLockKey checkLockKey);

        /// <summary>
        /// Check lock key
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool?>> CheckLockKeyAsyncWithHttpInfo (CheckLockKey checkLockKey);
        /// <summary>
        /// Get collection names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> CollectionsAsync ();

        /// <summary>
        /// Get collection names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> CollectionsAsyncWithHttpInfo ();
        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProjectApiKeys</returns>
        System.Threading.Tasks.Task<ProjectApiKeys> CreateApiKeysAsync ();

        /// <summary>
        /// Create API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProjectApiKeys)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectApiKeys>> CreateApiKeysAsyncWithHttpInfo ();
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>Task of ProjectApiKeys</returns>
        System.Threading.Tasks.Task<ProjectApiKeys> CreateProjectAsync (CreateProject createProject);

        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>Task of ApiResponse (ProjectApiKeys)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProjectApiKeys>> CreateProjectAsyncWithHttpInfo (CreateProject createProject);
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> DeleteProjectAsync ();

        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> DeleteProjectAsyncWithHttpInfo ();
        /// <summary>
        /// List installed modules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModuleDescriptor&gt;</returns>
        System.Threading.Tasks.Task<List<ModuleDescriptor>> GetConfigurationsAsync ();

        /// <summary>
        /// List installed modules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModuleDescriptor&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModuleDescriptor>>> GetConfigurationsAsyncWithHttpInfo ();
        /// <summary>
        /// List created projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> GetProjectsAsync ();

        /// <summary>
        /// List created projects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> GetProjectsAsyncWithHttpInfo ();
        /// <summary>
        /// Get project stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>Task of Dictionary&lt;string, Stats&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, Stats>> GetStatsAsync (ProjectGetStats projectGetStats);

        /// <summary>
        /// Get project stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Stats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Stats>>> GetStatsAsyncWithHttpInfo (ProjectGetStats projectGetStats);
        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> GetTypesAsync ();

        /// <summary>
        /// Get types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetTypesAsyncWithHttpInfo ();
        /// <summary>
        /// Revoke API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>Task of SuccessMessage</returns>
        System.Threading.Tasks.Task<SuccessMessage> RevokeApiKeysAsync (string masterKey);

        /// <summary>
        /// Revoke API Keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> RevokeApiKeysAsyncWithHttpInfo (string masterKey);
        /// <summary>
        /// Get collection schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        System.Threading.Tasks.Task<List<Collection>> SchemaAsync (ProjectSchema projectSchema);

        /// <summary>
        /// Get collection schema
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Collection>>> SchemaAsyncWithHttpInfo (ProjectSchema projectSchema);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AdminApi : IAdminApi
    {
        private Rakam.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AdminApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AdminApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AdminApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Rakam.Client.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Rakam.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add fields to collections by transforming other schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>List&lt;SchemaField&gt;</returns>
        public List<SchemaField> AddCustomFieldsToSchema (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema)
        {
             ApiResponse<List<SchemaField>> localVarResponse = AddCustomFieldsToSchemaWithHttpInfo(projectAddCustomFieldsToSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add fields to collections by transforming other schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>ApiResponse of List&lt;SchemaField&gt;</returns>
        public ApiResponse< List<SchemaField> > AddCustomFieldsToSchemaWithHttpInfo (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema)
        {
            // verify the required parameter 'projectAddCustomFieldsToSchema' is set
            if (projectAddCustomFieldsToSchema == null)
                throw new ApiException(400, "Missing required parameter 'projectAddCustomFieldsToSchema' when calling AdminApi->AddCustomFieldsToSchema");

            var localVarPath = "/project/schema/add/custom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectAddCustomFieldsToSchema != null && projectAddCustomFieldsToSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectAddCustomFieldsToSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectAddCustomFieldsToSchema; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomFieldsToSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SchemaField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SchemaField>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SchemaField>)));
            
        }

        /// <summary>
        /// Add fields to collections by transforming other schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>Task of List&lt;SchemaField&gt;</returns>
        public async System.Threading.Tasks.Task<List<SchemaField>> AddCustomFieldsToSchemaAsync (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema)
        {
             ApiResponse<List<SchemaField>> localVarResponse = await AddCustomFieldsToSchemaAsyncWithHttpInfo(projectAddCustomFieldsToSchema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add fields to collections by transforming other schemas 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddCustomFieldsToSchema"></param>
        /// <returns>Task of ApiResponse (List&lt;SchemaField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SchemaField>>> AddCustomFieldsToSchemaAsyncWithHttpInfo (ProjectAddCustomFieldsToSchema projectAddCustomFieldsToSchema)
        {
            // verify the required parameter 'projectAddCustomFieldsToSchema' is set
            if (projectAddCustomFieldsToSchema == null)
                throw new ApiException(400, "Missing required parameter 'projectAddCustomFieldsToSchema' when calling AdminApi->AddCustomFieldsToSchema");

            var localVarPath = "/project/schema/add/custom";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectAddCustomFieldsToSchema != null && projectAddCustomFieldsToSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectAddCustomFieldsToSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectAddCustomFieldsToSchema; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddCustomFieldsToSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SchemaField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SchemaField>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SchemaField>)));
            
        }

        /// <summary>
        /// Add fields to collections 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>List&lt;SchemaField&gt;</returns>
        public List<SchemaField> AddFieldsToSchema (ProjectAddFieldsToSchema projectAddFieldsToSchema)
        {
             ApiResponse<List<SchemaField>> localVarResponse = AddFieldsToSchemaWithHttpInfo(projectAddFieldsToSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add fields to collections 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>ApiResponse of List&lt;SchemaField&gt;</returns>
        public ApiResponse< List<SchemaField> > AddFieldsToSchemaWithHttpInfo (ProjectAddFieldsToSchema projectAddFieldsToSchema)
        {
            // verify the required parameter 'projectAddFieldsToSchema' is set
            if (projectAddFieldsToSchema == null)
                throw new ApiException(400, "Missing required parameter 'projectAddFieldsToSchema' when calling AdminApi->AddFieldsToSchema");

            var localVarPath = "/project/schema/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectAddFieldsToSchema != null && projectAddFieldsToSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectAddFieldsToSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectAddFieldsToSchema; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFieldsToSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SchemaField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SchemaField>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SchemaField>)));
            
        }

        /// <summary>
        /// Add fields to collections 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>Task of List&lt;SchemaField&gt;</returns>
        public async System.Threading.Tasks.Task<List<SchemaField>> AddFieldsToSchemaAsync (ProjectAddFieldsToSchema projectAddFieldsToSchema)
        {
             ApiResponse<List<SchemaField>> localVarResponse = await AddFieldsToSchemaAsyncWithHttpInfo(projectAddFieldsToSchema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add fields to collections 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectAddFieldsToSchema"></param>
        /// <returns>Task of ApiResponse (List&lt;SchemaField&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SchemaField>>> AddFieldsToSchemaAsyncWithHttpInfo (ProjectAddFieldsToSchema projectAddFieldsToSchema)
        {
            // verify the required parameter 'projectAddFieldsToSchema' is set
            if (projectAddFieldsToSchema == null)
                throw new ApiException(400, "Missing required parameter 'projectAddFieldsToSchema' when calling AdminApi->AddFieldsToSchema");

            var localVarPath = "/project/schema/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectAddFieldsToSchema != null && projectAddFieldsToSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectAddFieldsToSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectAddFieldsToSchema; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFieldsToSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SchemaField>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SchemaField>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SchemaField>)));
            
        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>List&lt;bool?&gt;</returns>
        public List<bool?> CheckApiKeys (ProjectCheckApiKeys projectCheckApiKeys)
        {
             ApiResponse<List<bool?>> localVarResponse = CheckApiKeysWithHttpInfo(projectCheckApiKeys);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>ApiResponse of List&lt;bool?&gt;</returns>
        public ApiResponse< List<bool?> > CheckApiKeysWithHttpInfo (ProjectCheckApiKeys projectCheckApiKeys)
        {
            // verify the required parameter 'projectCheckApiKeys' is set
            if (projectCheckApiKeys == null)
                throw new ApiException(400, "Missing required parameter 'projectCheckApiKeys' when calling AdminApi->CheckApiKeys");

            var localVarPath = "/project/check-api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectCheckApiKeys != null && projectCheckApiKeys.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectCheckApiKeys); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectCheckApiKeys; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<bool?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<bool?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<bool?>)));
            
        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>Task of List&lt;bool?&gt;</returns>
        public async System.Threading.Tasks.Task<List<bool?>> CheckApiKeysAsync (ProjectCheckApiKeys projectCheckApiKeys)
        {
             ApiResponse<List<bool?>> localVarResponse = await CheckApiKeysAsyncWithHttpInfo(projectCheckApiKeys);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectCheckApiKeys"></param>
        /// <returns>Task of ApiResponse (List&lt;bool?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<bool?>>> CheckApiKeysAsyncWithHttpInfo (ProjectCheckApiKeys projectCheckApiKeys)
        {
            // verify the required parameter 'projectCheckApiKeys' is set
            if (projectCheckApiKeys == null)
                throw new ApiException(400, "Missing required parameter 'projectCheckApiKeys' when calling AdminApi->CheckApiKeys");

            var localVarPath = "/project/check-api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectCheckApiKeys != null && projectCheckApiKeys.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectCheckApiKeys); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectCheckApiKeys; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<bool?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<bool?>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<bool?>)));
            
        }

        /// <summary>
        /// Check lock key 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>bool?</returns>
        public bool? CheckLockKey (CheckLockKey checkLockKey)
        {
             ApiResponse<bool?> localVarResponse = CheckLockKeyWithHttpInfo(checkLockKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check lock key 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>ApiResponse of bool?</returns>
        public ApiResponse< bool? > CheckLockKeyWithHttpInfo (CheckLockKey checkLockKey)
        {
            // verify the required parameter 'checkLockKey' is set
            if (checkLockKey == null)
                throw new ApiException(400, "Missing required parameter 'checkLockKey' when calling AdminApi->CheckLockKey");

            var localVarPath = "/admin/lock_key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (checkLockKey != null && checkLockKey.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkLockKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkLockKey; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckLockKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Check lock key 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>Task of bool?</returns>
        public async System.Threading.Tasks.Task<bool?> CheckLockKeyAsync (CheckLockKey checkLockKey)
        {
             ApiResponse<bool?> localVarResponse = await CheckLockKeyAsyncWithHttpInfo(checkLockKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check lock key 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="checkLockKey"></param>
        /// <returns>Task of ApiResponse (bool?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool?>> CheckLockKeyAsyncWithHttpInfo (CheckLockKey checkLockKey)
        {
            // verify the required parameter 'checkLockKey' is set
            if (checkLockKey == null)
                throw new ApiException(400, "Missing required parameter 'checkLockKey' when calling AdminApi->CheckLockKey");

            var localVarPath = "/admin/lock_key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (checkLockKey != null && checkLockKey.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(checkLockKey); // http body (model) parameter
            }
            else
            {
                localVarPostBody = checkLockKey; // byte array
            }

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CheckLockKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool?)));
            
        }

        /// <summary>
        /// Get collection names 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> Collections ()
        {
             ApiResponse<List<string>> localVarResponse = CollectionsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection names 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > CollectionsWithHttpInfo ()
        {

            var localVarPath = "/project/collection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Collections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Get collection names 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> CollectionsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await CollectionsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection names 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> CollectionsAsyncWithHttpInfo ()
        {

            var localVarPath = "/project/collection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Collections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ProjectApiKeys</returns>
        public ProjectApiKeys CreateApiKeys ()
        {
             ApiResponse<ProjectApiKeys> localVarResponse = CreateApiKeysWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ProjectApiKeys</returns>
        public ApiResponse< ProjectApiKeys > CreateApiKeysWithHttpInfo ()
        {

            var localVarPath = "/project/create-api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectApiKeys>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectApiKeys) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectApiKeys)));
            
        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ProjectApiKeys</returns>
        public async System.Threading.Tasks.Task<ProjectApiKeys> CreateApiKeysAsync ()
        {
             ApiResponse<ProjectApiKeys> localVarResponse = await CreateApiKeysAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ProjectApiKeys)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectApiKeys>> CreateApiKeysAsyncWithHttpInfo ()
        {

            var localVarPath = "/project/create-api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectApiKeys>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectApiKeys) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectApiKeys)));
            
        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>ProjectApiKeys</returns>
        public ProjectApiKeys CreateProject (CreateProject createProject)
        {
             ApiResponse<ProjectApiKeys> localVarResponse = CreateProjectWithHttpInfo(createProject);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>ApiResponse of ProjectApiKeys</returns>
        public ApiResponse< ProjectApiKeys > CreateProjectWithHttpInfo (CreateProject createProject)
        {
            // verify the required parameter 'createProject' is set
            if (createProject == null)
                throw new ApiException(400, "Missing required parameter 'createProject' when calling AdminApi->CreateProject");

            var localVarPath = "/project/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createProject != null && createProject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createProject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectApiKeys>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectApiKeys) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectApiKeys)));
            
        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>Task of ProjectApiKeys</returns>
        public async System.Threading.Tasks.Task<ProjectApiKeys> CreateProjectAsync (CreateProject createProject)
        {
             ApiResponse<ProjectApiKeys> localVarResponse = await CreateProjectAsyncWithHttpInfo(createProject);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProject"></param>
        /// <returns>Task of ApiResponse (ProjectApiKeys)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProjectApiKeys>> CreateProjectAsyncWithHttpInfo (CreateProject createProject)
        {
            // verify the required parameter 'createProject' is set
            if (createProject == null)
                throw new ApiException(400, "Missing required parameter 'createProject' when calling AdminApi->CreateProject");

            var localVarPath = "/project/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (createProject != null && createProject.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createProject); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createProject; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProjectApiKeys>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProjectApiKeys) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProjectApiKeys)));
            
        }

        /// <summary>
        /// Delete project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage DeleteProject ()
        {
             ApiResponse<SuccessMessage> localVarResponse = DeleteProjectWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > DeleteProjectWithHttpInfo ()
        {

            var localVarPath = "/project/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Delete project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> DeleteProjectAsync ()
        {
             ApiResponse<SuccessMessage> localVarResponse = await DeleteProjectAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete project 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> DeleteProjectAsyncWithHttpInfo ()
        {

            var localVarPath = "/project/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// List installed modules 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ModuleDescriptor&gt;</returns>
        public List<ModuleDescriptor> GetConfigurations ()
        {
             ApiResponse<List<ModuleDescriptor>> localVarResponse = GetConfigurationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List installed modules 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ModuleDescriptor&gt;</returns>
        public ApiResponse< List<ModuleDescriptor> > GetConfigurationsWithHttpInfo ()
        {

            var localVarPath = "/admin/configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModuleDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModuleDescriptor>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModuleDescriptor>)));
            
        }

        /// <summary>
        /// List installed modules 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ModuleDescriptor&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModuleDescriptor>> GetConfigurationsAsync ()
        {
             ApiResponse<List<ModuleDescriptor>> localVarResponse = await GetConfigurationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List installed modules 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ModuleDescriptor&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModuleDescriptor>>> GetConfigurationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/admin/configurations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetConfigurations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModuleDescriptor>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModuleDescriptor>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModuleDescriptor>)));
            
        }

        /// <summary>
        /// List created projects 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> GetProjects ()
        {
             ApiResponse<List<string>> localVarResponse = GetProjectsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List created projects 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse< List<string> > GetProjectsWithHttpInfo ()
        {

            var localVarPath = "/project/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// List created projects 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> GetProjectsAsync ()
        {
             ApiResponse<List<string>> localVarResponse = await GetProjectsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List created projects 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> GetProjectsAsyncWithHttpInfo ()
        {

            var localVarPath = "/project/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
            
        }

        /// <summary>
        /// Get project stats 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>Dictionary&lt;string, Stats&gt;</returns>
        public Dictionary<string, Stats> GetStats (ProjectGetStats projectGetStats)
        {
             ApiResponse<Dictionary<string, Stats>> localVarResponse = GetStatsWithHttpInfo(projectGetStats);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get project stats 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>ApiResponse of Dictionary&lt;string, Stats&gt;</returns>
        public ApiResponse< Dictionary<string, Stats> > GetStatsWithHttpInfo (ProjectGetStats projectGetStats)
        {
            // verify the required parameter 'projectGetStats' is set
            if (projectGetStats == null)
                throw new ApiException(400, "Missing required parameter 'projectGetStats' when calling AdminApi->GetStats");

            var localVarPath = "/project/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectGetStats != null && projectGetStats.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectGetStats); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectGetStats; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Stats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Stats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Stats>)));
            
        }

        /// <summary>
        /// Get project stats 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>Task of Dictionary&lt;string, Stats&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, Stats>> GetStatsAsync (ProjectGetStats projectGetStats)
        {
             ApiResponse<Dictionary<string, Stats>> localVarResponse = await GetStatsAsyncWithHttpInfo(projectGetStats);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get project stats 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectGetStats"></param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, Stats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Stats>>> GetStatsAsyncWithHttpInfo (ProjectGetStats projectGetStats)
        {
            // verify the required parameter 'projectGetStats' is set
            if (projectGetStats == null)
                throw new ApiException(400, "Missing required parameter 'projectGetStats' when calling AdminApi->GetStats");

            var localVarPath = "/project/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectGetStats != null && projectGetStats.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectGetStats); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectGetStats; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, Stats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, Stats>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, Stats>)));
            
        }

        /// <summary>
        /// Get types 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> GetTypes ()
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = GetTypesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get types 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > GetTypesWithHttpInfo ()
        {

            var localVarPath = "/admin/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Get types 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> GetTypesAsync ()
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await GetTypesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get types 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetTypesAsyncWithHttpInfo ()
        {

            var localVarPath = "/admin/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Dictionary<string, string>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
            
        }

        /// <summary>
        /// Revoke API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>SuccessMessage</returns>
        public SuccessMessage RevokeApiKeys (string masterKey)
        {
             ApiResponse<SuccessMessage> localVarResponse = RevokeApiKeysWithHttpInfo(masterKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>ApiResponse of SuccessMessage</returns>
        public ApiResponse< SuccessMessage > RevokeApiKeysWithHttpInfo (string masterKey)
        {
            // verify the required parameter 'masterKey' is set
            if (masterKey == null)
                throw new ApiException(400, "Missing required parameter 'masterKey' when calling AdminApi->RevokeApiKeys");

            var localVarPath = "/project/revoke-api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterKey != null) localVarHeaderParams.Add("master_key", Configuration.ApiClient.ParameterToString(masterKey)); // header parameter

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Revoke API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>Task of SuccessMessage</returns>
        public async System.Threading.Tasks.Task<SuccessMessage> RevokeApiKeysAsync (string masterKey)
        {
             ApiResponse<SuccessMessage> localVarResponse = await RevokeApiKeysAsyncWithHttpInfo(masterKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke API Keys 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="masterKey"></param>
        /// <returns>Task of ApiResponse (SuccessMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessMessage>> RevokeApiKeysAsyncWithHttpInfo (string masterKey)
        {
            // verify the required parameter 'masterKey' is set
            if (masterKey == null)
                throw new ApiException(400, "Missing required parameter 'masterKey' when calling AdminApi->RevokeApiKeys");

            var localVarPath = "/project/revoke-api-keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (masterKey != null) localVarHeaderParams.Add("master_key", Configuration.ApiClient.ParameterToString(masterKey)); // header parameter

            // authentication (master_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("master_key")))
            {
                localVarHeaderParams["master_key"] = Configuration.GetApiKeyWithPrefix("master_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RevokeApiKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessMessage) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessMessage)));
            
        }

        /// <summary>
        /// Get collection schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>List&lt;Collection&gt;</returns>
        public List<Collection> Schema (ProjectSchema projectSchema)
        {
             ApiResponse<List<Collection>> localVarResponse = SchemaWithHttpInfo(projectSchema);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get collection schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>ApiResponse of List&lt;Collection&gt;</returns>
        public ApiResponse< List<Collection> > SchemaWithHttpInfo (ProjectSchema projectSchema)
        {
            // verify the required parameter 'projectSchema' is set
            if (projectSchema == null)
                throw new ApiException(400, "Missing required parameter 'projectSchema' when calling AdminApi->Schema");

            var localVarPath = "/project/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectSchema != null && projectSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectSchema; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Schema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Collection>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
            
        }

        /// <summary>
        /// Get collection schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>Task of List&lt;Collection&gt;</returns>
        public async System.Threading.Tasks.Task<List<Collection>> SchemaAsync (ProjectSchema projectSchema)
        {
             ApiResponse<List<Collection>> localVarResponse = await SchemaAsyncWithHttpInfo(projectSchema);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get collection schema 
        /// </summary>
        /// <exception cref="Rakam.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectSchema"></param>
        /// <returns>Task of ApiResponse (List&lt;Collection&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Collection>>> SchemaAsyncWithHttpInfo (ProjectSchema projectSchema)
        {
            // verify the required parameter 'projectSchema' is set
            if (projectSchema == null)
                throw new ApiException(400, "Missing required parameter 'projectSchema' when calling AdminApi->Schema");

            var localVarPath = "/project/schema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (projectSchema != null && projectSchema.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(projectSchema); // http body (model) parameter
            }
            else
            {
                localVarPostBody = projectSchema; // byte array
            }

            // authentication (read_key) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("read_key")))
            {
                localVarHeaderParams["read_key"] = Configuration.GetApiKeyWithPrefix("read_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Schema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Collection>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Collection>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Collection>)));
            
        }

    }
}
