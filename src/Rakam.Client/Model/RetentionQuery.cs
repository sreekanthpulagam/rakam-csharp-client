/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Rakam.Client.Model
{
    /// <summary>
    /// RetentionQuery
    /// </summary>
    [DataContract]
    public partial class RetentionQuery :  IEquatable<RetentionQuery>
    {
        /// <summary>
        /// Gets or Sets DateUnit
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DateUnitEnum
        {
            
            /// <summary>
            /// Enum DAY for "DAY"
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAY,
            
            /// <summary>
            /// Enum WEEK for "WEEK"
            /// </summary>
            [EnumMember(Value = "WEEK")]
            WEEK,
            
            /// <summary>
            /// Enum MONTH for "MONTH"
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTH
        }

        /// <summary>
        /// Gets or Sets DateUnit
        /// </summary>
        [DataMember(Name="date_unit", EmitDefaultValue=false)]
        public DateUnitEnum? DateUnit { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RetentionQuery" /> class.
        /// </summary>
        /// <param name="FirstAction">FirstAction.</param>
        /// <param name="ReturningAction">ReturningAction.</param>
        /// <param name="Dimension">Dimension.</param>
        /// <param name="DateUnit">DateUnit.</param>
        /// <param name="Period">Period.</param>
        /// <param name="StartDate">StartDate.</param>
        /// <param name="EndDate">EndDate.</param>
        public RetentionQuery(RetentionAction FirstAction = null, RetentionAction ReturningAction = null, string Dimension = null, DateUnitEnum? DateUnit = null, int? Period = null, DateTime? StartDate = null, DateTime? EndDate = null)
        {
            this.FirstAction = FirstAction;
            this.ReturningAction = ReturningAction;
            this.Dimension = Dimension;
            this.DateUnit = DateUnit;
            this.Period = Period;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
        }
        
        /// <summary>
        /// Gets or Sets FirstAction
        /// </summary>
        [DataMember(Name="first_action", EmitDefaultValue=false)]
        public RetentionAction FirstAction { get; set; }
        /// <summary>
        /// Gets or Sets ReturningAction
        /// </summary>
        [DataMember(Name="returning_action", EmitDefaultValue=false)]
        public RetentionAction ReturningAction { get; set; }
        /// <summary>
        /// Gets or Sets Dimension
        /// </summary>
        [DataMember(Name="dimension", EmitDefaultValue=false)]
        public string Dimension { get; set; }
        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name="period", EmitDefaultValue=false)]
        public int? Period { get; set; }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }
        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RetentionQuery {\n");
            sb.Append("  FirstAction: ").Append(FirstAction).Append("\n");
            sb.Append("  ReturningAction: ").Append(ReturningAction).Append("\n");
            sb.Append("  Dimension: ").Append(Dimension).Append("\n");
            sb.Append("  DateUnit: ").Append(DateUnit).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RetentionQuery);
        }

        /// <summary>
        /// Returns true if RetentionQuery instances are equal
        /// </summary>
        /// <param name="other">Instance of RetentionQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RetentionQuery other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FirstAction == other.FirstAction ||
                    this.FirstAction != null &&
                    this.FirstAction.Equals(other.FirstAction)
                ) && 
                (
                    this.ReturningAction == other.ReturningAction ||
                    this.ReturningAction != null &&
                    this.ReturningAction.Equals(other.ReturningAction)
                ) && 
                (
                    this.Dimension == other.Dimension ||
                    this.Dimension != null &&
                    this.Dimension.Equals(other.Dimension)
                ) && 
                (
                    this.DateUnit == other.DateUnit ||
                    this.DateUnit != null &&
                    this.DateUnit.Equals(other.DateUnit)
                ) && 
                (
                    this.Period == other.Period ||
                    this.Period != null &&
                    this.Period.Equals(other.Period)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FirstAction != null)
                    hash = hash * 59 + this.FirstAction.GetHashCode();
                if (this.ReturningAction != null)
                    hash = hash * 59 + this.ReturningAction.GetHashCode();
                if (this.Dimension != null)
                    hash = hash * 59 + this.Dimension.GetHashCode();
                if (this.DateUnit != null)
                    hash = hash * 59 + this.DateUnit.GetHashCode();
                if (this.Period != null)
                    hash = hash * 59 + this.Period.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                return hash;
            }
        }
    }

}
