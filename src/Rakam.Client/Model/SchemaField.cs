/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Rakam.Client.Model
{
    /// <summary>
    /// SchemaField
    /// </summary>
    [DataContract]
    public partial class SchemaField :  IEquatable<SchemaField>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum STRING for "STRING"
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING,
            
            /// <summary>
            /// Enum INTEGER for "INTEGER"
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGER,
            
            /// <summary>
            /// Enum DECIMAL for "DECIMAL"
            /// </summary>
            [EnumMember(Value = "DECIMAL")]
            DECIMAL,
            
            /// <summary>
            /// Enum DOUBLE for "DOUBLE"
            /// </summary>
            [EnumMember(Value = "DOUBLE")]
            DOUBLE,
            
            /// <summary>
            /// Enum LONG for "LONG"
            /// </summary>
            [EnumMember(Value = "LONG")]
            LONG,
            
            /// <summary>
            /// Enum BOOLEAN for "BOOLEAN"
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN,
            
            /// <summary>
            /// Enum DATE for "DATE"
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATE,
            
            /// <summary>
            /// Enum TIME for "TIME"
            /// </summary>
            [EnumMember(Value = "TIME")]
            TIME,
            
            /// <summary>
            /// Enum TIMESTAMP for "TIMESTAMP"
            /// </summary>
            [EnumMember(Value = "TIMESTAMP")]
            TIMESTAMP,
            
            /// <summary>
            /// Enum BINARY for "BINARY"
            /// </summary>
            [EnumMember(Value = "BINARY")]
            BINARY,
            
            /// <summary>
            /// Enum ARRAYSTRING for "ARRAY_STRING"
            /// </summary>
            [EnumMember(Value = "ARRAY_STRING")]
            ARRAYSTRING,
            
            /// <summary>
            /// Enum ARRAYINTEGER for "ARRAY_INTEGER"
            /// </summary>
            [EnumMember(Value = "ARRAY_INTEGER")]
            ARRAYINTEGER,
            
            /// <summary>
            /// Enum ARRAYDECIMAL for "ARRAY_DECIMAL"
            /// </summary>
            [EnumMember(Value = "ARRAY_DECIMAL")]
            ARRAYDECIMAL,
            
            /// <summary>
            /// Enum ARRAYDOUBLE for "ARRAY_DOUBLE"
            /// </summary>
            [EnumMember(Value = "ARRAY_DOUBLE")]
            ARRAYDOUBLE,
            
            /// <summary>
            /// Enum ARRAYLONG for "ARRAY_LONG"
            /// </summary>
            [EnumMember(Value = "ARRAY_LONG")]
            ARRAYLONG,
            
            /// <summary>
            /// Enum ARRAYBOOLEAN for "ARRAY_BOOLEAN"
            /// </summary>
            [EnumMember(Value = "ARRAY_BOOLEAN")]
            ARRAYBOOLEAN,
            
            /// <summary>
            /// Enum ARRAYDATE for "ARRAY_DATE"
            /// </summary>
            [EnumMember(Value = "ARRAY_DATE")]
            ARRAYDATE,
            
            /// <summary>
            /// Enum ARRAYTIME for "ARRAY_TIME"
            /// </summary>
            [EnumMember(Value = "ARRAY_TIME")]
            ARRAYTIME,
            
            /// <summary>
            /// Enum ARRAYTIMESTAMP for "ARRAY_TIMESTAMP"
            /// </summary>
            [EnumMember(Value = "ARRAY_TIMESTAMP")]
            ARRAYTIMESTAMP,
            
            /// <summary>
            /// Enum ARRAYBINARY for "ARRAY_BINARY"
            /// </summary>
            [EnumMember(Value = "ARRAY_BINARY")]
            ARRAYBINARY,
            
            /// <summary>
            /// Enum MAPSTRING for "MAP_STRING"
            /// </summary>
            [EnumMember(Value = "MAP_STRING")]
            MAPSTRING,
            
            /// <summary>
            /// Enum MAPINTEGER for "MAP_INTEGER"
            /// </summary>
            [EnumMember(Value = "MAP_INTEGER")]
            MAPINTEGER,
            
            /// <summary>
            /// Enum MAPDECIMAL for "MAP_DECIMAL"
            /// </summary>
            [EnumMember(Value = "MAP_DECIMAL")]
            MAPDECIMAL,
            
            /// <summary>
            /// Enum MAPDOUBLE for "MAP_DOUBLE"
            /// </summary>
            [EnumMember(Value = "MAP_DOUBLE")]
            MAPDOUBLE,
            
            /// <summary>
            /// Enum MAPLONG for "MAP_LONG"
            /// </summary>
            [EnumMember(Value = "MAP_LONG")]
            MAPLONG,
            
            /// <summary>
            /// Enum MAPBOOLEAN for "MAP_BOOLEAN"
            /// </summary>
            [EnumMember(Value = "MAP_BOOLEAN")]
            MAPBOOLEAN,
            
            /// <summary>
            /// Enum MAPDATE for "MAP_DATE"
            /// </summary>
            [EnumMember(Value = "MAP_DATE")]
            MAPDATE,
            
            /// <summary>
            /// Enum MAPTIME for "MAP_TIME"
            /// </summary>
            [EnumMember(Value = "MAP_TIME")]
            MAPTIME,
            
            /// <summary>
            /// Enum MAPTIMESTAMP for "MAP_TIMESTAMP"
            /// </summary>
            [EnumMember(Value = "MAP_TIMESTAMP")]
            MAPTIMESTAMP,
            
            /// <summary>
            /// Enum MAPBINARY for "MAP_BINARY"
            /// </summary>
            [EnumMember(Value = "MAP_BINARY")]
            MAPBINARY
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SchemaField" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Type">Type.</param>
        /// <param name="Unique">Unique (default to false).</param>
        /// <param name="DescriptiveName">DescriptiveName.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Category">Category.</param>
        public SchemaField(string Name = null, TypeEnum? Type = null, bool? Unique = null, string DescriptiveName = null, string Description = null, string Category = null)
        {
            this.Name = Name;
            this.Type = Type;
            // use default value if no "Unique" provided
            if (Unique == null)
            {
                this.Unique = false;
            }
            else
            {
                this.Unique = Unique;
            }
            this.DescriptiveName = DescriptiveName;
            this.Description = Description;
            this.Category = Category;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Unique
        /// </summary>
        [DataMember(Name="unique", EmitDefaultValue=false)]
        public bool? Unique { get; set; }
        /// <summary>
        /// Gets or Sets DescriptiveName
        /// </summary>
        [DataMember(Name="descriptiveName", EmitDefaultValue=false)]
        public string DescriptiveName { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SchemaField {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Unique: ").Append(Unique).Append("\n");
            sb.Append("  DescriptiveName: ").Append(DescriptiveName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as SchemaField);
        }

        /// <summary>
        /// Returns true if SchemaField instances are equal
        /// </summary>
        /// <param name="other">Instance of SchemaField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SchemaField other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Unique == other.Unique ||
                    this.Unique != null &&
                    this.Unique.Equals(other.Unique)
                ) && 
                (
                    this.DescriptiveName == other.DescriptiveName ||
                    this.DescriptiveName != null &&
                    this.DescriptiveName.Equals(other.DescriptiveName)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Unique != null)
                    hash = hash * 59 + this.Unique.GetHashCode();
                if (this.DescriptiveName != null)
                    hash = hash * 59 + this.DescriptiveName.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                return hash;
            }
        }
    }

}
