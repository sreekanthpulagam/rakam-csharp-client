/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Rakam.Client.Model
{
    /// <summary>
    /// EventFilterAggregation
    /// </summary>
    [DataContract]
    public partial class EventFilterAggregation :  IEquatable<EventFilterAggregation>
    {
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum COUNT for "COUNT"
            /// </summary>
            [EnumMember(Value = "COUNT")]
            COUNT,
            
            /// <summary>
            /// Enum COUNTUNIQUE for "COUNT_UNIQUE"
            /// </summary>
            [EnumMember(Value = "COUNT_UNIQUE")]
            COUNTUNIQUE,
            
            /// <summary>
            /// Enum SUM for "SUM"
            /// </summary>
            [EnumMember(Value = "SUM")]
            SUM,
            
            /// <summary>
            /// Enum MINIMUM for "MINIMUM"
            /// </summary>
            [EnumMember(Value = "MINIMUM")]
            MINIMUM,
            
            /// <summary>
            /// Enum MAXIMUM for "MAXIMUM"
            /// </summary>
            [EnumMember(Value = "MAXIMUM")]
            MAXIMUM,
            
            /// <summary>
            /// Enum AVERAGE for "AVERAGE"
            /// </summary>
            [EnumMember(Value = "AVERAGE")]
            AVERAGE,
            
            /// <summary>
            /// Enum APPROXIMATEUNIQUE for "APPROXIMATE_UNIQUE"
            /// </summary>
            [EnumMember(Value = "APPROXIMATE_UNIQUE")]
            APPROXIMATEUNIQUE
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventFilterAggregation" /> class.
        /// </summary>
        /// <param name="Field">Field.</param>
        /// <param name="Minimum">Minimum.</param>
        /// <param name="Maximum">Maximum.</param>
        /// <param name="Type">Type.</param>
        public EventFilterAggregation(string Field = null, long? Minimum = null, long? Maximum = null, TypeEnum? Type = null)
        {
            this.Field = Field;
            this.Minimum = Minimum;
            this.Maximum = Maximum;
            this.Type = Type;
        }
        
        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }
        /// <summary>
        /// Gets or Sets Minimum
        /// </summary>
        [DataMember(Name="minimum", EmitDefaultValue=false)]
        public long? Minimum { get; set; }
        /// <summary>
        /// Gets or Sets Maximum
        /// </summary>
        [DataMember(Name="maximum", EmitDefaultValue=false)]
        public long? Maximum { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventFilterAggregation {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Minimum: ").Append(Minimum).Append("\n");
            sb.Append("  Maximum: ").Append(Maximum).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as EventFilterAggregation);
        }

        /// <summary>
        /// Returns true if EventFilterAggregation instances are equal
        /// </summary>
        /// <param name="other">Instance of EventFilterAggregation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventFilterAggregation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Field == other.Field ||
                    this.Field != null &&
                    this.Field.Equals(other.Field)
                ) && 
                (
                    this.Minimum == other.Minimum ||
                    this.Minimum != null &&
                    this.Minimum.Equals(other.Minimum)
                ) && 
                (
                    this.Maximum == other.Maximum ||
                    this.Maximum != null &&
                    this.Maximum.Equals(other.Maximum)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Field != null)
                    hash = hash * 59 + this.Field.GetHashCode();
                if (this.Minimum != null)
                    hash = hash * 59 + this.Minimum.GetHashCode();
                if (this.Maximum != null)
                    hash = hash * 59 + this.Maximum.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }
    }

}
