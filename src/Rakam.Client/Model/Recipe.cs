/* 
 * Rakam API Documentation
 *
 * An analytics platform API that lets you create your own analytics services.
 *
 * OpenAPI spec version: 0.5
 * Contact: contact@rakam.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Rakam.Client.Model
{
    /// <summary>
    /// Recipe
    /// </summary>
    [DataContract]
    public partial class Recipe :  IEquatable<Recipe>
    {
        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StrategyEnum
        {
            
            /// <summary>
            /// Enum DEFAULT for "DEFAULT"
            /// </summary>
            [EnumMember(Value = "DEFAULT")]
            DEFAULT,
            
            /// <summary>
            /// Enum SPECIFIC for "SPECIFIC"
            /// </summary>
            [EnumMember(Value = "SPECIFIC")]
            SPECIFIC
        }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name="strategy", EmitDefaultValue=false)]
        public StrategyEnum? Strategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Recipe" /> class.
        /// </summary>
        /// <param name="Strategy">Strategy.</param>
        /// <param name="Collections">Collections.</param>
        /// <param name="MaterializedViews">MaterializedViews.</param>
        /// <param name="ContinuousQueries">ContinuousQueries.</param>
        public Recipe(StrategyEnum? Strategy = null, Dictionary<string, CollectionDefinition> Collections = null, List<MaterializedView> MaterializedViews = null, List<ContinuousQuery> ContinuousQueries = null)
        {
            this.Strategy = Strategy;
            this.Collections = Collections;
            this.MaterializedViews = MaterializedViews;
            this.ContinuousQueries = ContinuousQueries;
        }
        
        /// <summary>
        /// Gets or Sets Collections
        /// </summary>
        [DataMember(Name="collections", EmitDefaultValue=false)]
        public Dictionary<string, CollectionDefinition> Collections { get; set; }
        /// <summary>
        /// Gets or Sets MaterializedViews
        /// </summary>
        [DataMember(Name="materialized_views", EmitDefaultValue=false)]
        public List<MaterializedView> MaterializedViews { get; set; }
        /// <summary>
        /// Gets or Sets ContinuousQueries
        /// </summary>
        [DataMember(Name="continuous_queries", EmitDefaultValue=false)]
        public List<ContinuousQuery> ContinuousQueries { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Recipe {\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Collections: ").Append(Collections).Append("\n");
            sb.Append("  MaterializedViews: ").Append(MaterializedViews).Append("\n");
            sb.Append("  ContinuousQueries: ").Append(ContinuousQueries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Recipe);
        }

        /// <summary>
        /// Returns true if Recipe instances are equal
        /// </summary>
        /// <param name="other">Instance of Recipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Recipe other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Strategy == other.Strategy ||
                    this.Strategy != null &&
                    this.Strategy.Equals(other.Strategy)
                ) && 
                (
                    this.Collections == other.Collections ||
                    this.Collections != null &&
                    this.Collections.SequenceEqual(other.Collections)
                ) && 
                (
                    this.MaterializedViews == other.MaterializedViews ||
                    this.MaterializedViews != null &&
                    this.MaterializedViews.SequenceEqual(other.MaterializedViews)
                ) && 
                (
                    this.ContinuousQueries == other.ContinuousQueries ||
                    this.ContinuousQueries != null &&
                    this.ContinuousQueries.SequenceEqual(other.ContinuousQueries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Strategy != null)
                    hash = hash * 59 + this.Strategy.GetHashCode();
                if (this.Collections != null)
                    hash = hash * 59 + this.Collections.GetHashCode();
                if (this.MaterializedViews != null)
                    hash = hash * 59 + this.MaterializedViews.GetHashCode();
                if (this.ContinuousQueries != null)
                    hash = hash * 59 + this.ContinuousQueries.GetHashCode();
                return hash;
            }
        }
    }

}
